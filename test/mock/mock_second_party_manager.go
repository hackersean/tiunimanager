// Code generated by MockGen. DO NOT EDIT.
// Source: ./library/secondparty/second_party_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbpb "github.com/pingcap-inc/tiem/library/client/metadb/dbpb"
	secondparty "github.com/pingcap-inc/tiem/library/secondparty"
)

// MockMicroSrv is a mock of MicroSrv interface.
type MockMicroSrv struct {
	ctrl     *gomock.Controller
	recorder *MockMicroSrvMockRecorder
}

// MockMicroSrvMockRecorder is the mock recorder for MockMicroSrv.
type MockMicroSrvMockRecorder struct {
	mock *MockMicroSrv
}

// NewMockMicroSrv creates a new mock instance.
func NewMockMicroSrv(ctrl *gomock.Controller) *MockMicroSrv {
	mock := &MockMicroSrv{ctrl: ctrl}
	mock.recorder = &MockMicroSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMicroSrv) EXPECT() *MockMicroSrvMockRecorder {
	return m.recorder
}

// MicroInit mocks base method.
func (m *MockMicroSrv) MicroInit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MicroInit")
}

// MicroInit indicates an expected call of MicroInit.
func (mr *MockMicroSrvMockRecorder) MicroInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroInit", reflect.TypeOf((*MockMicroSrv)(nil).MicroInit))
}

// MicroSrvBackUp mocks base method.
func (m *MockMicroSrv) MicroSrvBackUp(cluster secondparty.ClusterFacade, storage secondparty.BrStorage, bizId uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvBackUp", cluster, storage, bizId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvBackUp indicates an expected call of MicroSrvBackUp.
func (mr *MockMicroSrvMockRecorder) MicroSrvBackUp(cluster, storage, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvBackUp", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvBackUp), cluster, storage, bizId)
}

// MicroSrvDumpling mocks base method.
func (m *MockMicroSrv) MicroSrvDumpling(timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvDumpling", timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvDumpling indicates an expected call of MicroSrvDumpling.
func (mr *MockMicroSrvMockRecorder) MicroSrvDumpling(timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvDumpling", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvDumpling), timeoutS, flags, bizID)
}

// MicroSrvGetTaskStatus mocks base method.
func (m *MockMicroSrv) MicroSrvGetTaskStatus(taskID uint64) (dbpb.TiupTaskStatus, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvGetTaskStatus", taskID)
	ret0, _ := ret[0].(dbpb.TiupTaskStatus)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MicroSrvGetTaskStatus indicates an expected call of MicroSrvGetTaskStatus.
func (mr *MockMicroSrvMockRecorder) MicroSrvGetTaskStatus(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvGetTaskStatus", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvGetTaskStatus), taskID)
}

// MicroSrvGetTaskStatusByBizID mocks base method.
func (m *MockMicroSrv) MicroSrvGetTaskStatusByBizID(bizID uint64) (dbpb.TiupTaskStatus, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvGetTaskStatusByBizID", bizID)
	ret0, _ := ret[0].(dbpb.TiupTaskStatus)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MicroSrvGetTaskStatusByBizID indicates an expected call of MicroSrvGetTaskStatusByBizID.
func (mr *MockMicroSrvMockRecorder) MicroSrvGetTaskStatusByBizID(bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvGetTaskStatusByBizID", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvGetTaskStatusByBizID), bizID)
}

// MicroSrvLightning mocks base method.
func (m *MockMicroSrv) MicroSrvLightning(timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvLightning", timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvLightning indicates an expected call of MicroSrvLightning.
func (mr *MockMicroSrvMockRecorder) MicroSrvLightning(timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvLightning", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvLightning), timeoutS, flags, bizID)
}

// MicroSrvRestore mocks base method.
func (m *MockMicroSrv) MicroSrvRestore(cluster secondparty.ClusterFacade, storage secondparty.BrStorage, bizId uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvRestore", cluster, storage, bizId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvRestore indicates an expected call of MicroSrvRestore.
func (mr *MockMicroSrvMockRecorder) MicroSrvRestore(cluster, storage, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvRestore", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvRestore), cluster, storage, bizId)
}

// MicroSrvShowBackUpInfo mocks base method.
func (m *MockMicroSrv) MicroSrvShowBackUpInfo(cluster secondparty.ClusterFacade) secondparty.CmdShowBackUpInfoResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvShowBackUpInfo", cluster)
	ret0, _ := ret[0].(secondparty.CmdShowBackUpInfoResp)
	return ret0
}

// MicroSrvShowBackUpInfo indicates an expected call of MicroSrvShowBackUpInfo.
func (mr *MockMicroSrvMockRecorder) MicroSrvShowBackUpInfo(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvShowBackUpInfo", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvShowBackUpInfo), cluster)
}

// MicroSrvShowRestoreInfo mocks base method.
func (m *MockMicroSrv) MicroSrvShowRestoreInfo(cluster secondparty.ClusterFacade) secondparty.CmdShowRestoreInfoResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvShowRestoreInfo", cluster)
	ret0, _ := ret[0].(secondparty.CmdShowRestoreInfoResp)
	return ret0
}

// MicroSrvShowRestoreInfo indicates an expected call of MicroSrvShowRestoreInfo.
func (mr *MockMicroSrvMockRecorder) MicroSrvShowRestoreInfo(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvShowRestoreInfo", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvShowRestoreInfo), cluster)
}

// MicroSrvTiupDeploy mocks base method.
func (m *MockMicroSrv) MicroSrvTiupDeploy(tiupComponent secondparty.TiUPComponentTypeStr, instanceName, version, configStrYaml string, timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupDeploy", tiupComponent, instanceName, version, configStrYaml, timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupDeploy indicates an expected call of MicroSrvTiupDeploy.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupDeploy(tiupComponent, instanceName, version, configStrYaml, timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupDeploy", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupDeploy), tiupComponent, instanceName, version, configStrYaml, timeoutS, flags, bizID)
}

// MicroSrvTiupDestroy mocks base method.
func (m *MockMicroSrv) MicroSrvTiupDestroy(tiupComponent secondparty.TiUPComponentTypeStr, instanceName string, timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupDestroy", tiupComponent, instanceName, timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupDestroy indicates an expected call of MicroSrvTiupDestroy.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupDestroy(tiupComponent, instanceName, timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupDestroy", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupDestroy), tiupComponent, instanceName, timeoutS, flags, bizID)
}

// MicroSrvTiupDisplay mocks base method.
func (m *MockMicroSrv) MicroSrvTiupDisplay(tiupComponent secondparty.TiUPComponentTypeStr, instanceName string, timeoutS int, flags []string) (*secondparty.CmdDisplayResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupDisplay", tiupComponent, instanceName, timeoutS, flags)
	ret0, _ := ret[0].(*secondparty.CmdDisplayResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupDisplay indicates an expected call of MicroSrvTiupDisplay.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupDisplay(tiupComponent, instanceName, timeoutS, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupDisplay", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupDisplay), tiupComponent, instanceName, timeoutS, flags)
}

// MicroSrvTiupList mocks base method.
func (m *MockMicroSrv) MicroSrvTiupList(tiupComponent secondparty.TiUPComponentTypeStr, timeoutS int, flags []string) (*secondparty.CmdListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupList", tiupComponent, timeoutS, flags)
	ret0, _ := ret[0].(*secondparty.CmdListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupList indicates an expected call of MicroSrvTiupList.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupList(tiupComponent, timeoutS, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupList", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupList), tiupComponent, timeoutS, flags)
}

// MicroSrvTiupRestart mocks base method.
func (m *MockMicroSrv) MicroSrvTiupRestart(tiupComponent secondparty.TiUPComponentTypeStr, instanceName string, timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupRestart", tiupComponent, instanceName, timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupRestart indicates an expected call of MicroSrvTiupRestart.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupRestart(tiupComponent, instanceName, timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupRestart", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupRestart), tiupComponent, instanceName, timeoutS, flags, bizID)
}

// MicroSrvTiupStart mocks base method.
func (m *MockMicroSrv) MicroSrvTiupStart(tiupComponent secondparty.TiUPComponentTypeStr, instanceName string, timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupStart", tiupComponent, instanceName, timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupStart indicates an expected call of MicroSrvTiupStart.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupStart(tiupComponent, instanceName, timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupStart", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupStart), tiupComponent, instanceName, timeoutS, flags, bizID)
}

// MicroSrvTiupStop mocks base method.
func (m *MockMicroSrv) MicroSrvTiupStop(tiupComponent secondparty.TiUPComponentTypeStr, instanceName string, timeoutS int, flags []string, bizID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MicroSrvTiupStop", tiupComponent, instanceName, timeoutS, flags, bizID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MicroSrvTiupStop indicates an expected call of MicroSrvTiupStop.
func (mr *MockMicroSrvMockRecorder) MicroSrvTiupStop(tiupComponent, instanceName, timeoutS, flags, bizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MicroSrvTiupStop", reflect.TypeOf((*MockMicroSrv)(nil).MicroSrvTiupStop), tiupComponent, instanceName, timeoutS, flags, bizID)
}
