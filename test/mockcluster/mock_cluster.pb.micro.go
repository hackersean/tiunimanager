// Code generated by MockGen. DO NOT EDIT.
// Source: ./library/client/cluster/clusterpb/cluster.pb.micro.go

// Package mockcluster is a generated GoMock package.
package mockcluster

import (
	context "context"
	reflect "reflect"

	client "github.com/asim/go-micro/v3/client"
	gomock "github.com/golang/mock/gomock"
	clusterpb "github.com/pingcap-inc/tiem/library/client/cluster/clusterpb"
)

// MockClusterService is a mock of ClusterService interface.
type MockClusterService struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceMockRecorder
}

// MockClusterServiceMockRecorder is the mock recorder for MockClusterService.
type MockClusterServiceMockRecorder struct {
	mock *MockClusterService
}

// NewMockClusterService creates a new mock instance.
func NewMockClusterService(ctrl *gomock.Controller) *MockClusterService {
	mock := &MockClusterService{ctrl: ctrl}
	mock.recorder = &MockClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterService) EXPECT() *MockClusterServiceMockRecorder {
	return m.recorder
}

// AllocHosts mocks base method.
func (m *MockClusterService) AllocHosts(ctx context.Context, in *clusterpb.AllocHostsRequest, opts ...client.CallOption) (*clusterpb.AllocHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocHosts", varargs...)
	ret0, _ := ret[0].(*clusterpb.AllocHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHosts indicates an expected call of AllocHosts.
func (mr *MockClusterServiceMockRecorder) AllocHosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHosts", reflect.TypeOf((*MockClusterService)(nil).AllocHosts), varargs...)
}

// AllocResourcesInBatch mocks base method.
func (m *MockClusterService) AllocResourcesInBatch(ctx context.Context, in *clusterpb.BatchAllocRequest, opts ...client.CallOption) (*clusterpb.BatchAllocResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocResourcesInBatch", varargs...)
	ret0, _ := ret[0].(*clusterpb.BatchAllocResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocResourcesInBatch indicates an expected call of AllocResourcesInBatch.
func (mr *MockClusterServiceMockRecorder) AllocResourcesInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResourcesInBatch", reflect.TypeOf((*MockClusterService)(nil).AllocResourcesInBatch), varargs...)
}

// CheckDetails mocks base method.
func (m *MockClusterService) CheckDetails(ctx context.Context, in *clusterpb.CheckDetailsRequest, opts ...client.CallOption) (*clusterpb.CheckDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckDetails", varargs...)
	ret0, _ := ret[0].(*clusterpb.CheckDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDetails indicates an expected call of CheckDetails.
func (mr *MockClusterServiceMockRecorder) CheckDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDetails", reflect.TypeOf((*MockClusterService)(nil).CheckDetails), varargs...)
}

// CreateBackup mocks base method.
func (m *MockClusterService) CreateBackup(ctx context.Context, in *clusterpb.CreateBackupRequest, opts ...client.CallOption) (*clusterpb.CreateBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackup", varargs...)
	ret0, _ := ret[0].(*clusterpb.CreateBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockClusterServiceMockRecorder) CreateBackup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockClusterService)(nil).CreateBackup), varargs...)
}

// CreateCluster mocks base method.
func (m *MockClusterService) CreateCluster(ctx context.Context, in *clusterpb.ClusterCreateReqDTO, opts ...client.CallOption) (*clusterpb.ClusterCreateRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterCreateRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterServiceMockRecorder) CreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterService)(nil).CreateCluster), varargs...)
}

// DeleteBackupRecord mocks base method.
func (m *MockClusterService) DeleteBackupRecord(ctx context.Context, in *clusterpb.DeleteBackupRequest, opts ...client.CallOption) (*clusterpb.DeleteBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupRecord", varargs...)
	ret0, _ := ret[0].(*clusterpb.DeleteBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupRecord indicates an expected call of DeleteBackupRecord.
func (mr *MockClusterServiceMockRecorder) DeleteBackupRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRecord", reflect.TypeOf((*MockClusterService)(nil).DeleteBackupRecord), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockClusterService) DeleteCluster(ctx context.Context, in *clusterpb.ClusterDeleteReqDTO, opts ...client.CallOption) (*clusterpb.ClusterDeleteRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterDeleteRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterServiceMockRecorder) DeleteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterService)(nil).DeleteCluster), varargs...)
}

// DescribeDashboard mocks base method.
func (m *MockClusterService) DescribeDashboard(ctx context.Context, in *clusterpb.DescribeDashboardRequest, opts ...client.CallOption) (*clusterpb.DescribeDashboardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDashboard", varargs...)
	ret0, _ := ret[0].(*clusterpb.DescribeDashboardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDashboard indicates an expected call of DescribeDashboard.
func (mr *MockClusterServiceMockRecorder) DescribeDashboard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDashboard", reflect.TypeOf((*MockClusterService)(nil).DescribeDashboard), varargs...)
}

// DescribeDataTransport mocks base method.
func (m *MockClusterService) DescribeDataTransport(ctx context.Context, in *clusterpb.DataTransportQueryRequest, opts ...client.CallOption) (*clusterpb.DataTransportQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataTransport", varargs...)
	ret0, _ := ret[0].(*clusterpb.DataTransportQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataTransport indicates an expected call of DescribeDataTransport.
func (mr *MockClusterServiceMockRecorder) DescribeDataTransport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataTransport", reflect.TypeOf((*MockClusterService)(nil).DescribeDataTransport), varargs...)
}

// DescribeMonitor mocks base method.
func (m *MockClusterService) DescribeMonitor(ctx context.Context, in *clusterpb.DescribeMonitorRequest, opts ...client.CallOption) (*clusterpb.DescribeMonitorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMonitor", varargs...)
	ret0, _ := ret[0].(*clusterpb.DescribeMonitorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMonitor indicates an expected call of DescribeMonitor.
func (mr *MockClusterServiceMockRecorder) DescribeMonitor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMonitor", reflect.TypeOf((*MockClusterService)(nil).DescribeMonitor), varargs...)
}

// DetailCluster mocks base method.
func (m *MockClusterService) DetailCluster(ctx context.Context, in *clusterpb.ClusterDetailReqDTO, opts ...client.CallOption) (*clusterpb.ClusterDetailRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetailCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterDetailRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailCluster indicates an expected call of DetailCluster.
func (mr *MockClusterServiceMockRecorder) DetailCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailCluster", reflect.TypeOf((*MockClusterService)(nil).DetailCluster), varargs...)
}

// DetailFlow mocks base method.
func (m *MockClusterService) DetailFlow(ctx context.Context, in *clusterpb.DetailFlowRequest, opts ...client.CallOption) (*clusterpb.DetailFlowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetailFlow", varargs...)
	ret0, _ := ret[0].(*clusterpb.DetailFlowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailFlow indicates an expected call of DetailFlow.
func (mr *MockClusterServiceMockRecorder) DetailFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailFlow", reflect.TypeOf((*MockClusterService)(nil).DetailFlow), varargs...)
}

// ExportData mocks base method.
func (m *MockClusterService) ExportData(ctx context.Context, in *clusterpb.DataExportRequest, opts ...client.CallOption) (*clusterpb.DataExportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportData", varargs...)
	ret0, _ := ret[0].(*clusterpb.DataExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportData indicates an expected call of ExportData.
func (mr *MockClusterServiceMockRecorder) ExportData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportData", reflect.TypeOf((*MockClusterService)(nil).ExportData), varargs...)
}

// GetBackupStrategy mocks base method.
func (m *MockClusterService) GetBackupStrategy(ctx context.Context, in *clusterpb.GetBackupStrategyRequest, opts ...client.CallOption) (*clusterpb.GetBackupStrategyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackupStrategy", varargs...)
	ret0, _ := ret[0].(*clusterpb.GetBackupStrategyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupStrategy indicates an expected call of GetBackupStrategy.
func (mr *MockClusterServiceMockRecorder) GetBackupStrategy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupStrategy", reflect.TypeOf((*MockClusterService)(nil).GetBackupStrategy), varargs...)
}

// GetFailureDomain mocks base method.
func (m *MockClusterService) GetFailureDomain(ctx context.Context, in *clusterpb.GetFailureDomainRequest, opts ...client.CallOption) (*clusterpb.GetFailureDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFailureDomain", varargs...)
	ret0, _ := ret[0].(*clusterpb.GetFailureDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailureDomain indicates an expected call of GetFailureDomain.
func (mr *MockClusterServiceMockRecorder) GetFailureDomain(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureDomain", reflect.TypeOf((*MockClusterService)(nil).GetFailureDomain), varargs...)
}

// GetHierarchy mocks base method.
func (m *MockClusterService) GetHierarchy(ctx context.Context, in *clusterpb.GetHierarchyRequest, opts ...client.CallOption) (*clusterpb.GetHierarchyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHierarchy", varargs...)
	ret0, _ := ret[0].(*clusterpb.GetHierarchyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHierarchy indicates an expected call of GetHierarchy.
func (mr *MockClusterServiceMockRecorder) GetHierarchy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHierarchy", reflect.TypeOf((*MockClusterService)(nil).GetHierarchy), varargs...)
}

// GetStocks mocks base method.
func (m *MockClusterService) GetStocks(ctx context.Context, in *clusterpb.GetStocksRequest, opts ...client.CallOption) (*clusterpb.GetStocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStocks", varargs...)
	ret0, _ := ret[0].(*clusterpb.GetStocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStocks indicates an expected call of GetStocks.
func (mr *MockClusterServiceMockRecorder) GetStocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocks", reflect.TypeOf((*MockClusterService)(nil).GetStocks), varargs...)
}

// ImportData mocks base method.
func (m *MockClusterService) ImportData(ctx context.Context, in *clusterpb.DataImportRequest, opts ...client.CallOption) (*clusterpb.DataImportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportData", varargs...)
	ret0, _ := ret[0].(*clusterpb.DataImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportData indicates an expected call of ImportData.
func (mr *MockClusterServiceMockRecorder) ImportData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportData", reflect.TypeOf((*MockClusterService)(nil).ImportData), varargs...)
}

// ImportHost mocks base method.
func (m *MockClusterService) ImportHost(ctx context.Context, in *clusterpb.ImportHostRequest, opts ...client.CallOption) (*clusterpb.ImportHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportHost", varargs...)
	ret0, _ := ret[0].(*clusterpb.ImportHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportHost indicates an expected call of ImportHost.
func (mr *MockClusterServiceMockRecorder) ImportHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportHost", reflect.TypeOf((*MockClusterService)(nil).ImportHost), varargs...)
}

// ImportHostsInBatch mocks base method.
func (m *MockClusterService) ImportHostsInBatch(ctx context.Context, in *clusterpb.ImportHostsInBatchRequest, opts ...client.CallOption) (*clusterpb.ImportHostsInBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportHostsInBatch", varargs...)
	ret0, _ := ret[0].(*clusterpb.ImportHostsInBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportHostsInBatch indicates an expected call of ImportHostsInBatch.
func (mr *MockClusterServiceMockRecorder) ImportHostsInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportHostsInBatch", reflect.TypeOf((*MockClusterService)(nil).ImportHostsInBatch), varargs...)
}

// ListFlows mocks base method.
func (m *MockClusterService) ListFlows(ctx context.Context, in *clusterpb.ListFlowsRequest, opts ...client.CallOption) (*clusterpb.ListFlowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlows", varargs...)
	ret0, _ := ret[0].(*clusterpb.ListFlowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows.
func (mr *MockClusterServiceMockRecorder) ListFlows(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockClusterService)(nil).ListFlows), varargs...)
}

// ListHost mocks base method.
func (m *MockClusterService) ListHost(ctx context.Context, in *clusterpb.ListHostsRequest, opts ...client.CallOption) (*clusterpb.ListHostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHost", varargs...)
	ret0, _ := ret[0].(*clusterpb.ListHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHost indicates an expected call of ListHost.
func (mr *MockClusterServiceMockRecorder) ListHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHost", reflect.TypeOf((*MockClusterService)(nil).ListHost), varargs...)
}

// Login mocks base method.
func (m *MockClusterService) Login(ctx context.Context, in *clusterpb.LoginRequest, opts ...client.CallOption) (*clusterpb.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*clusterpb.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClusterServiceMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClusterService)(nil).Login), varargs...)
}

// Logout mocks base method.
func (m *MockClusterService) Logout(ctx context.Context, in *clusterpb.LogoutRequest, opts ...client.CallOption) (*clusterpb.LogoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*clusterpb.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockClusterServiceMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockClusterService)(nil).Logout), varargs...)
}

// QueryBackupRecord mocks base method.
func (m *MockClusterService) QueryBackupRecord(ctx context.Context, in *clusterpb.QueryBackupRequest, opts ...client.CallOption) (*clusterpb.QueryBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBackupRecord", varargs...)
	ret0, _ := ret[0].(*clusterpb.QueryBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBackupRecord indicates an expected call of QueryBackupRecord.
func (mr *MockClusterServiceMockRecorder) QueryBackupRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupRecord", reflect.TypeOf((*MockClusterService)(nil).QueryBackupRecord), varargs...)
}

// QueryCluster mocks base method.
func (m *MockClusterService) QueryCluster(ctx context.Context, in *clusterpb.ClusterQueryReqDTO, opts ...client.CallOption) (*clusterpb.ClusterQueryRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterQueryRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCluster indicates an expected call of QueryCluster.
func (mr *MockClusterServiceMockRecorder) QueryCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCluster", reflect.TypeOf((*MockClusterService)(nil).QueryCluster), varargs...)
}

// QueryParameters mocks base method.
func (m *MockClusterService) QueryParameters(ctx context.Context, in *clusterpb.QueryClusterParametersRequest, opts ...client.CallOption) (*clusterpb.QueryClusterParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryParameters", varargs...)
	ret0, _ := ret[0].(*clusterpb.QueryClusterParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryParameters indicates an expected call of QueryParameters.
func (mr *MockClusterServiceMockRecorder) QueryParameters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryParameters", reflect.TypeOf((*MockClusterService)(nil).QueryParameters), varargs...)
}

// RecoverCluster mocks base method.
func (m *MockClusterService) RecoverCluster(ctx context.Context, in *clusterpb.RecoverRequest, opts ...client.CallOption) (*clusterpb.RecoverResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecoverCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.RecoverResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverCluster indicates an expected call of RecoverCluster.
func (mr *MockClusterServiceMockRecorder) RecoverCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverCluster", reflect.TypeOf((*MockClusterService)(nil).RecoverCluster), varargs...)
}

// RecycleResources mocks base method.
func (m *MockClusterService) RecycleResources(ctx context.Context, in *clusterpb.RecycleRequest, opts ...client.CallOption) (*clusterpb.RecycleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecycleResources", varargs...)
	ret0, _ := ret[0].(*clusterpb.RecycleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecycleResources indicates an expected call of RecycleResources.
func (mr *MockClusterServiceMockRecorder) RecycleResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecycleResources", reflect.TypeOf((*MockClusterService)(nil).RecycleResources), varargs...)
}

// RemoveHost mocks base method.
func (m *MockClusterService) RemoveHost(ctx context.Context, in *clusterpb.RemoveHostRequest, opts ...client.CallOption) (*clusterpb.RemoveHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHost", varargs...)
	ret0, _ := ret[0].(*clusterpb.RemoveHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterServiceMockRecorder) RemoveHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockClusterService)(nil).RemoveHost), varargs...)
}

// RemoveHostsInBatch mocks base method.
func (m *MockClusterService) RemoveHostsInBatch(ctx context.Context, in *clusterpb.RemoveHostsInBatchRequest, opts ...client.CallOption) (*clusterpb.RemoveHostsInBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostsInBatch", varargs...)
	ret0, _ := ret[0].(*clusterpb.RemoveHostsInBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostsInBatch indicates an expected call of RemoveHostsInBatch.
func (mr *MockClusterServiceMockRecorder) RemoveHostsInBatch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostsInBatch", reflect.TypeOf((*MockClusterService)(nil).RemoveHostsInBatch), varargs...)
}

// ReserveHost mocks base method.
func (m *MockClusterService) ReserveHost(ctx context.Context, in *clusterpb.ReserveHostRequest, opts ...client.CallOption) (*clusterpb.ReserveHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveHost", varargs...)
	ret0, _ := ret[0].(*clusterpb.ReserveHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveHost indicates an expected call of ReserveHost.
func (mr *MockClusterServiceMockRecorder) ReserveHost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveHost", reflect.TypeOf((*MockClusterService)(nil).ReserveHost), varargs...)
}

// RestartCluster mocks base method.
func (m *MockClusterService) RestartCluster(ctx context.Context, in *clusterpb.ClusterRestartReqDTO, opts ...client.CallOption) (*clusterpb.ClusterRestartRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterRestartRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartCluster indicates an expected call of RestartCluster.
func (mr *MockClusterServiceMockRecorder) RestartCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartCluster", reflect.TypeOf((*MockClusterService)(nil).RestartCluster), varargs...)
}

// SaveBackupStrategy mocks base method.
func (m *MockClusterService) SaveBackupStrategy(ctx context.Context, in *clusterpb.SaveBackupStrategyRequest, opts ...client.CallOption) (*clusterpb.SaveBackupStrategyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBackupStrategy", varargs...)
	ret0, _ := ret[0].(*clusterpb.SaveBackupStrategyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBackupStrategy indicates an expected call of SaveBackupStrategy.
func (mr *MockClusterServiceMockRecorder) SaveBackupStrategy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupStrategy", reflect.TypeOf((*MockClusterService)(nil).SaveBackupStrategy), varargs...)
}

// SaveParameters mocks base method.
func (m *MockClusterService) SaveParameters(ctx context.Context, in *clusterpb.SaveClusterParametersRequest, opts ...client.CallOption) (*clusterpb.SaveClusterParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveParameters", varargs...)
	ret0, _ := ret[0].(*clusterpb.SaveClusterParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveParameters indicates an expected call of SaveParameters.
func (mr *MockClusterServiceMockRecorder) SaveParameters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveParameters", reflect.TypeOf((*MockClusterService)(nil).SaveParameters), varargs...)
}

// StopCluster mocks base method.
func (m *MockClusterService) StopCluster(ctx context.Context, in *clusterpb.ClusterStopReqDTO, opts ...client.CallOption) (*clusterpb.ClusterStopRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCluster", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterStopRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockClusterServiceMockRecorder) StopCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockClusterService)(nil).StopCluster), varargs...)
}

// TakeoverClusters mocks base method.
func (m *MockClusterService) TakeoverClusters(ctx context.Context, in *clusterpb.ClusterTakeoverReqDTO, opts ...client.CallOption) (*clusterpb.ClusterTakeoverRespDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeoverClusters", varargs...)
	ret0, _ := ret[0].(*clusterpb.ClusterTakeoverRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeoverClusters indicates an expected call of TakeoverClusters.
func (mr *MockClusterServiceMockRecorder) TakeoverClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeoverClusters", reflect.TypeOf((*MockClusterService)(nil).TakeoverClusters), varargs...)
}

// UpdateHostStatus mocks base method.
func (m *MockClusterService) UpdateHostStatus(ctx context.Context, in *clusterpb.UpdateHostStatusRequest, opts ...client.CallOption) (*clusterpb.UpdateHostStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostStatus", varargs...)
	ret0, _ := ret[0].(*clusterpb.UpdateHostStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostStatus indicates an expected call of UpdateHostStatus.
func (mr *MockClusterServiceMockRecorder) UpdateHostStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostStatus", reflect.TypeOf((*MockClusterService)(nil).UpdateHostStatus), varargs...)
}

// VerifyIdentity mocks base method.
func (m *MockClusterService) VerifyIdentity(ctx context.Context, in *clusterpb.VerifyIdentityRequest, opts ...client.CallOption) (*clusterpb.VerifyIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyIdentity", varargs...)
	ret0, _ := ret[0].(*clusterpb.VerifyIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIdentity indicates an expected call of VerifyIdentity.
func (mr *MockClusterServiceMockRecorder) VerifyIdentity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIdentity", reflect.TypeOf((*MockClusterService)(nil).VerifyIdentity), varargs...)
}

// MockClusterServiceHandler is a mock of ClusterServiceHandler interface.
type MockClusterServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceHandlerMockRecorder
}

// MockClusterServiceHandlerMockRecorder is the mock recorder for MockClusterServiceHandler.
type MockClusterServiceHandlerMockRecorder struct {
	mock *MockClusterServiceHandler
}

// NewMockClusterServiceHandler creates a new mock instance.
func NewMockClusterServiceHandler(ctrl *gomock.Controller) *MockClusterServiceHandler {
	mock := &MockClusterServiceHandler{ctrl: ctrl}
	mock.recorder = &MockClusterServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterServiceHandler) EXPECT() *MockClusterServiceHandlerMockRecorder {
	return m.recorder
}

// AllocHosts mocks base method.
func (m *MockClusterServiceHandler) AllocHosts(arg0 context.Context, arg1 *clusterpb.AllocHostsRequest, arg2 *clusterpb.AllocHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocHosts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocHosts indicates an expected call of AllocHosts.
func (mr *MockClusterServiceHandlerMockRecorder) AllocHosts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHosts", reflect.TypeOf((*MockClusterServiceHandler)(nil).AllocHosts), arg0, arg1, arg2)
}

// AllocResourcesInBatch mocks base method.
func (m *MockClusterServiceHandler) AllocResourcesInBatch(arg0 context.Context, arg1 *clusterpb.BatchAllocRequest, arg2 *clusterpb.BatchAllocResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocResourcesInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocResourcesInBatch indicates an expected call of AllocResourcesInBatch.
func (mr *MockClusterServiceHandlerMockRecorder) AllocResourcesInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocResourcesInBatch", reflect.TypeOf((*MockClusterServiceHandler)(nil).AllocResourcesInBatch), arg0, arg1, arg2)
}

// CheckDetails mocks base method.
func (m *MockClusterServiceHandler) CheckDetails(arg0 context.Context, arg1 *clusterpb.CheckDetailsRequest, arg2 *clusterpb.CheckDetailsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDetails indicates an expected call of CheckDetails.
func (mr *MockClusterServiceHandlerMockRecorder) CheckDetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDetails", reflect.TypeOf((*MockClusterServiceHandler)(nil).CheckDetails), arg0, arg1, arg2)
}

// CreateBackup mocks base method.
func (m *MockClusterServiceHandler) CreateBackup(arg0 context.Context, arg1 *clusterpb.CreateBackupRequest, arg2 *clusterpb.CreateBackupResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockClusterServiceHandlerMockRecorder) CreateBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockClusterServiceHandler)(nil).CreateBackup), arg0, arg1, arg2)
}

// CreateCluster mocks base method.
func (m *MockClusterServiceHandler) CreateCluster(arg0 context.Context, arg1 *clusterpb.ClusterCreateReqDTO, arg2 *clusterpb.ClusterCreateRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterServiceHandlerMockRecorder) CreateCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).CreateCluster), arg0, arg1, arg2)
}

// DeleteBackupRecord mocks base method.
func (m *MockClusterServiceHandler) DeleteBackupRecord(arg0 context.Context, arg1 *clusterpb.DeleteBackupRequest, arg2 *clusterpb.DeleteBackupResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupRecord indicates an expected call of DeleteBackupRecord.
func (mr *MockClusterServiceHandlerMockRecorder) DeleteBackupRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRecord", reflect.TypeOf((*MockClusterServiceHandler)(nil).DeleteBackupRecord), arg0, arg1, arg2)
}

// DeleteCluster mocks base method.
func (m *MockClusterServiceHandler) DeleteCluster(arg0 context.Context, arg1 *clusterpb.ClusterDeleteReqDTO, arg2 *clusterpb.ClusterDeleteRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterServiceHandlerMockRecorder) DeleteCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).DeleteCluster), arg0, arg1, arg2)
}

// DescribeDashboard mocks base method.
func (m *MockClusterServiceHandler) DescribeDashboard(arg0 context.Context, arg1 *clusterpb.DescribeDashboardRequest, arg2 *clusterpb.DescribeDashboardResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDashboard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDashboard indicates an expected call of DescribeDashboard.
func (mr *MockClusterServiceHandlerMockRecorder) DescribeDashboard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDashboard", reflect.TypeOf((*MockClusterServiceHandler)(nil).DescribeDashboard), arg0, arg1, arg2)
}

// DescribeDataTransport mocks base method.
func (m *MockClusterServiceHandler) DescribeDataTransport(arg0 context.Context, arg1 *clusterpb.DataTransportQueryRequest, arg2 *clusterpb.DataTransportQueryResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataTransport", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDataTransport indicates an expected call of DescribeDataTransport.
func (mr *MockClusterServiceHandlerMockRecorder) DescribeDataTransport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataTransport", reflect.TypeOf((*MockClusterServiceHandler)(nil).DescribeDataTransport), arg0, arg1, arg2)
}

// DescribeMonitor mocks base method.
func (m *MockClusterServiceHandler) DescribeMonitor(arg0 context.Context, arg1 *clusterpb.DescribeMonitorRequest, arg2 *clusterpb.DescribeMonitorResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMonitor", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeMonitor indicates an expected call of DescribeMonitor.
func (mr *MockClusterServiceHandlerMockRecorder) DescribeMonitor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMonitor", reflect.TypeOf((*MockClusterServiceHandler)(nil).DescribeMonitor), arg0, arg1, arg2)
}

// DetailCluster mocks base method.
func (m *MockClusterServiceHandler) DetailCluster(arg0 context.Context, arg1 *clusterpb.ClusterDetailReqDTO, arg2 *clusterpb.ClusterDetailRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetailCluster indicates an expected call of DetailCluster.
func (mr *MockClusterServiceHandlerMockRecorder) DetailCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).DetailCluster), arg0, arg1, arg2)
}

// DetailFlow mocks base method.
func (m *MockClusterServiceHandler) DetailFlow(arg0 context.Context, arg1 *clusterpb.DetailFlowRequest, arg2 *clusterpb.DetailFlowsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailFlow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetailFlow indicates an expected call of DetailFlow.
func (mr *MockClusterServiceHandlerMockRecorder) DetailFlow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailFlow", reflect.TypeOf((*MockClusterServiceHandler)(nil).DetailFlow), arg0, arg1, arg2)
}

// ExportData mocks base method.
func (m *MockClusterServiceHandler) ExportData(arg0 context.Context, arg1 *clusterpb.DataExportRequest, arg2 *clusterpb.DataExportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportData indicates an expected call of ExportData.
func (mr *MockClusterServiceHandlerMockRecorder) ExportData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportData", reflect.TypeOf((*MockClusterServiceHandler)(nil).ExportData), arg0, arg1, arg2)
}

// GetBackupStrategy mocks base method.
func (m *MockClusterServiceHandler) GetBackupStrategy(arg0 context.Context, arg1 *clusterpb.GetBackupStrategyRequest, arg2 *clusterpb.GetBackupStrategyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupStrategy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBackupStrategy indicates an expected call of GetBackupStrategy.
func (mr *MockClusterServiceHandlerMockRecorder) GetBackupStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupStrategy", reflect.TypeOf((*MockClusterServiceHandler)(nil).GetBackupStrategy), arg0, arg1, arg2)
}

// GetFailureDomain mocks base method.
func (m *MockClusterServiceHandler) GetFailureDomain(arg0 context.Context, arg1 *clusterpb.GetFailureDomainRequest, arg2 *clusterpb.GetFailureDomainResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailureDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFailureDomain indicates an expected call of GetFailureDomain.
func (mr *MockClusterServiceHandlerMockRecorder) GetFailureDomain(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureDomain", reflect.TypeOf((*MockClusterServiceHandler)(nil).GetFailureDomain), arg0, arg1, arg2)
}

// GetHierarchy mocks base method.
func (m *MockClusterServiceHandler) GetHierarchy(arg0 context.Context, arg1 *clusterpb.GetHierarchyRequest, arg2 *clusterpb.GetHierarchyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHierarchy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHierarchy indicates an expected call of GetHierarchy.
func (mr *MockClusterServiceHandlerMockRecorder) GetHierarchy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHierarchy", reflect.TypeOf((*MockClusterServiceHandler)(nil).GetHierarchy), arg0, arg1, arg2)
}

// GetStocks mocks base method.
func (m *MockClusterServiceHandler) GetStocks(arg0 context.Context, arg1 *clusterpb.GetStocksRequest, arg2 *clusterpb.GetStocksResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStocks indicates an expected call of GetStocks.
func (mr *MockClusterServiceHandlerMockRecorder) GetStocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocks", reflect.TypeOf((*MockClusterServiceHandler)(nil).GetStocks), arg0, arg1, arg2)
}

// ImportData mocks base method.
func (m *MockClusterServiceHandler) ImportData(arg0 context.Context, arg1 *clusterpb.DataImportRequest, arg2 *clusterpb.DataImportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportData indicates an expected call of ImportData.
func (mr *MockClusterServiceHandlerMockRecorder) ImportData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportData", reflect.TypeOf((*MockClusterServiceHandler)(nil).ImportData), arg0, arg1, arg2)
}

// ImportHost mocks base method.
func (m *MockClusterServiceHandler) ImportHost(arg0 context.Context, arg1 *clusterpb.ImportHostRequest, arg2 *clusterpb.ImportHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportHost indicates an expected call of ImportHost.
func (mr *MockClusterServiceHandlerMockRecorder) ImportHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportHost", reflect.TypeOf((*MockClusterServiceHandler)(nil).ImportHost), arg0, arg1, arg2)
}

// ImportHostsInBatch mocks base method.
func (m *MockClusterServiceHandler) ImportHostsInBatch(arg0 context.Context, arg1 *clusterpb.ImportHostsInBatchRequest, arg2 *clusterpb.ImportHostsInBatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportHostsInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportHostsInBatch indicates an expected call of ImportHostsInBatch.
func (mr *MockClusterServiceHandlerMockRecorder) ImportHostsInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportHostsInBatch", reflect.TypeOf((*MockClusterServiceHandler)(nil).ImportHostsInBatch), arg0, arg1, arg2)
}

// ListFlows mocks base method.
func (m *MockClusterServiceHandler) ListFlows(arg0 context.Context, arg1 *clusterpb.ListFlowsRequest, arg2 *clusterpb.ListFlowsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFlows indicates an expected call of ListFlows.
func (mr *MockClusterServiceHandlerMockRecorder) ListFlows(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockClusterServiceHandler)(nil).ListFlows), arg0, arg1, arg2)
}

// ListHost mocks base method.
func (m *MockClusterServiceHandler) ListHost(arg0 context.Context, arg1 *clusterpb.ListHostsRequest, arg2 *clusterpb.ListHostsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHost indicates an expected call of ListHost.
func (mr *MockClusterServiceHandlerMockRecorder) ListHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHost", reflect.TypeOf((*MockClusterServiceHandler)(nil).ListHost), arg0, arg1, arg2)
}

// Login mocks base method.
func (m *MockClusterServiceHandler) Login(arg0 context.Context, arg1 *clusterpb.LoginRequest, arg2 *clusterpb.LoginResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockClusterServiceHandlerMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClusterServiceHandler)(nil).Login), arg0, arg1, arg2)
}

// Logout mocks base method.
func (m *MockClusterServiceHandler) Logout(arg0 context.Context, arg1 *clusterpb.LogoutRequest, arg2 *clusterpb.LogoutResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockClusterServiceHandlerMockRecorder) Logout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockClusterServiceHandler)(nil).Logout), arg0, arg1, arg2)
}

// QueryBackupRecord mocks base method.
func (m *MockClusterServiceHandler) QueryBackupRecord(arg0 context.Context, arg1 *clusterpb.QueryBackupRequest, arg2 *clusterpb.QueryBackupResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBackupRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBackupRecord indicates an expected call of QueryBackupRecord.
func (mr *MockClusterServiceHandlerMockRecorder) QueryBackupRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBackupRecord", reflect.TypeOf((*MockClusterServiceHandler)(nil).QueryBackupRecord), arg0, arg1, arg2)
}

// QueryCluster mocks base method.
func (m *MockClusterServiceHandler) QueryCluster(arg0 context.Context, arg1 *clusterpb.ClusterQueryReqDTO, arg2 *clusterpb.ClusterQueryRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryCluster indicates an expected call of QueryCluster.
func (mr *MockClusterServiceHandlerMockRecorder) QueryCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).QueryCluster), arg0, arg1, arg2)
}

// QueryParameters mocks base method.
func (m *MockClusterServiceHandler) QueryParameters(arg0 context.Context, arg1 *clusterpb.QueryClusterParametersRequest, arg2 *clusterpb.QueryClusterParametersResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryParameters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryParameters indicates an expected call of QueryParameters.
func (mr *MockClusterServiceHandlerMockRecorder) QueryParameters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryParameters", reflect.TypeOf((*MockClusterServiceHandler)(nil).QueryParameters), arg0, arg1, arg2)
}

// RecoverCluster mocks base method.
func (m *MockClusterServiceHandler) RecoverCluster(arg0 context.Context, arg1 *clusterpb.RecoverRequest, arg2 *clusterpb.RecoverResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverCluster indicates an expected call of RecoverCluster.
func (mr *MockClusterServiceHandlerMockRecorder) RecoverCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).RecoverCluster), arg0, arg1, arg2)
}

// RecycleResources mocks base method.
func (m *MockClusterServiceHandler) RecycleResources(arg0 context.Context, arg1 *clusterpb.RecycleRequest, arg2 *clusterpb.RecycleResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecycleResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecycleResources indicates an expected call of RecycleResources.
func (mr *MockClusterServiceHandlerMockRecorder) RecycleResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecycleResources", reflect.TypeOf((*MockClusterServiceHandler)(nil).RecycleResources), arg0, arg1, arg2)
}

// RemoveHost mocks base method.
func (m *MockClusterServiceHandler) RemoveHost(arg0 context.Context, arg1 *clusterpb.RemoveHostRequest, arg2 *clusterpb.RemoveHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterServiceHandlerMockRecorder) RemoveHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockClusterServiceHandler)(nil).RemoveHost), arg0, arg1, arg2)
}

// RemoveHostsInBatch mocks base method.
func (m *MockClusterServiceHandler) RemoveHostsInBatch(arg0 context.Context, arg1 *clusterpb.RemoveHostsInBatchRequest, arg2 *clusterpb.RemoveHostsInBatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostsInBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostsInBatch indicates an expected call of RemoveHostsInBatch.
func (mr *MockClusterServiceHandlerMockRecorder) RemoveHostsInBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostsInBatch", reflect.TypeOf((*MockClusterServiceHandler)(nil).RemoveHostsInBatch), arg0, arg1, arg2)
}

// ReserveHost mocks base method.
func (m *MockClusterServiceHandler) ReserveHost(arg0 context.Context, arg1 *clusterpb.ReserveHostRequest, arg2 *clusterpb.ReserveHostResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveHost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveHost indicates an expected call of ReserveHost.
func (mr *MockClusterServiceHandlerMockRecorder) ReserveHost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveHost", reflect.TypeOf((*MockClusterServiceHandler)(nil).ReserveHost), arg0, arg1, arg2)
}

// RestartCluster mocks base method.
func (m *MockClusterServiceHandler) RestartCluster(arg0 context.Context, arg1 *clusterpb.ClusterRestartReqDTO, arg2 *clusterpb.ClusterRestartRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartCluster indicates an expected call of RestartCluster.
func (mr *MockClusterServiceHandlerMockRecorder) RestartCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).RestartCluster), arg0, arg1, arg2)
}

// SaveBackupStrategy mocks base method.
func (m *MockClusterServiceHandler) SaveBackupStrategy(arg0 context.Context, arg1 *clusterpb.SaveBackupStrategyRequest, arg2 *clusterpb.SaveBackupStrategyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBackupStrategy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBackupStrategy indicates an expected call of SaveBackupStrategy.
func (mr *MockClusterServiceHandlerMockRecorder) SaveBackupStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackupStrategy", reflect.TypeOf((*MockClusterServiceHandler)(nil).SaveBackupStrategy), arg0, arg1, arg2)
}

// SaveParameters mocks base method.
func (m *MockClusterServiceHandler) SaveParameters(arg0 context.Context, arg1 *clusterpb.SaveClusterParametersRequest, arg2 *clusterpb.SaveClusterParametersResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveParameters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveParameters indicates an expected call of SaveParameters.
func (mr *MockClusterServiceHandlerMockRecorder) SaveParameters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveParameters", reflect.TypeOf((*MockClusterServiceHandler)(nil).SaveParameters), arg0, arg1, arg2)
}

// StopCluster mocks base method.
func (m *MockClusterServiceHandler) StopCluster(arg0 context.Context, arg1 *clusterpb.ClusterStopReqDTO, arg2 *clusterpb.ClusterStopRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCluster indicates an expected call of StopCluster.
func (mr *MockClusterServiceHandlerMockRecorder) StopCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCluster", reflect.TypeOf((*MockClusterServiceHandler)(nil).StopCluster), arg0, arg1, arg2)
}

// TakeoverClusters mocks base method.
func (m *MockClusterServiceHandler) TakeoverClusters(arg0 context.Context, arg1 *clusterpb.ClusterTakeoverReqDTO, arg2 *clusterpb.ClusterTakeoverRespDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeoverClusters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeoverClusters indicates an expected call of TakeoverClusters.
func (mr *MockClusterServiceHandlerMockRecorder) TakeoverClusters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeoverClusters", reflect.TypeOf((*MockClusterServiceHandler)(nil).TakeoverClusters), arg0, arg1, arg2)
}

// UpdateHostStatus mocks base method.
func (m *MockClusterServiceHandler) UpdateHostStatus(arg0 context.Context, arg1 *clusterpb.UpdateHostStatusRequest, arg2 *clusterpb.UpdateHostStatusResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostStatus indicates an expected call of UpdateHostStatus.
func (mr *MockClusterServiceHandlerMockRecorder) UpdateHostStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostStatus", reflect.TypeOf((*MockClusterServiceHandler)(nil).UpdateHostStatus), arg0, arg1, arg2)
}

// VerifyIdentity mocks base method.
func (m *MockClusterServiceHandler) VerifyIdentity(arg0 context.Context, arg1 *clusterpb.VerifyIdentityRequest, arg2 *clusterpb.VerifyIdentityResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIdentity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyIdentity indicates an expected call of VerifyIdentity.
func (mr *MockClusterServiceHandlerMockRecorder) VerifyIdentity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIdentity", reflect.TypeOf((*MockClusterServiceHandler)(nil).VerifyIdentity), arg0, arg1, arg2)
}
