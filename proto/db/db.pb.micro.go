// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: db.proto

package db

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Db service

func NewDbEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Db service

type DbService interface {
	FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...client.CallOption) (*FindUserByNameResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	CheckUser(ctx context.Context, in *CheckUserRequest, opts ...client.CallOption) (*CheckUserResponse, error)
}

type dbService struct {
	c    client.Client
	name string
}

func NewDbService(name string, c client.Client) DbService {
	return &dbService{
		c:    c,
		name: name,
	}
}

func (c *dbService) FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...client.CallOption) (*FindUserByNameResponse, error) {
	req := c.c.NewRequest(c.name, "Db.FindUserByName", in)
	out := new(FindUserByNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Db.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbService) CheckUser(ctx context.Context, in *CheckUserRequest, opts ...client.CallOption) (*CheckUserResponse, error) {
	req := c.c.NewRequest(c.name, "Db.CheckUser", in)
	out := new(CheckUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Db service

type DbHandler interface {
	FindUserByName(context.Context, *FindUserByNameRequest, *FindUserByNameResponse) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	CheckUser(context.Context, *CheckUserRequest, *CheckUserResponse) error
}

func RegisterDbHandler(s server.Server, hdlr DbHandler, opts ...server.HandlerOption) error {
	type db interface {
		FindUserByName(ctx context.Context, in *FindUserByNameRequest, out *FindUserByNameResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		CheckUser(ctx context.Context, in *CheckUserRequest, out *CheckUserResponse) error
	}
	type Db struct {
		db
	}
	h := &dbHandler{hdlr}
	return s.Handle(s.NewHandler(&Db{h}, opts...))
}

type dbHandler struct {
	DbHandler
}

func (h *dbHandler) FindUserByName(ctx context.Context, in *FindUserByNameRequest, out *FindUserByNameResponse) error {
	return h.DbHandler.FindUserByName(ctx, in, out)
}

func (h *dbHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.DbHandler.CreateUser(ctx, in, out)
}

func (h *dbHandler) CheckUser(ctx context.Context, in *CheckUserRequest, out *CheckUserResponse) error {
	return h.DbHandler.CheckUser(ctx, in, out)
}
