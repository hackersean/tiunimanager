syntax = "proto3";

option go_package = "./dbpb/;dbpb";

message DBHostResponseStatus {
    int32 code = 1;
    string message = 2;
}

message DBHostPageDTO {
    int32 page = 1;
    int32 pageSize = 2;
    int32 total = 3;
}

message DBDiskDTO {
    string diskId = 1;
    string name = 2;            // [sda/sdb/nvmep0...]
    int32 capacity = 3;         // Disk size, Unit: GB
    string path = 4;            // Disk mount path: [/data1]
    string type = 5;
    string usedBy = 6;
    int32 status = 7;
}

message DBAllocationReq {
    string failureDomain = 1;
    int32 cpuCores = 2;
    int32 memory = 3;
    int32 count = 4;
    string purpose = 5;
}

message DBHostInfoDTO {
    string hostId = 1;
    string hostName = 2;
    string region = 3;
    string az = 4;
    string rack = 5;
    string ip = 6;
    string userName = 7;
    string passwd = 8;
    int32 status = 9;
    int32 stat = 10;
    string arch = 11;
    string os = 12;                 // Host os
    string kernel = 13;
    string spec = 14;               // Host Spec ["4C8G/16C32g"]
    int32 cpuCores = 15;            // Host cpu cores spec
    int32 memory = 16;              // Host memory spec
    int32 freeCpuCores = 17;        // Host cpu Remains
    int32 freeMemory = 18;          // Host memory Remains, Unit:GB
    string nic = 19;                // Host network type: 1GE or 10GE
    string purpose = 20;            // What Purpose is the host used for? [compute/storage or general]
    string diskType = 21;
    bool reserved = 22;
    int64 createAt = 23;
    int64 updateAt = 24;
    repeated DBDiskDTO disks = 25;
}

message DBAllocHostDTO {
    string hostName = 1;
    string ip = 2;
    string userName = 3;
    string passwd = 4;
    int32 cpuCores = 5;
    int32 memory = 6;
    DBDiskDTO disk = 7;
}

message DBFailureDomainResource {
    string failureDomain = 1;
    string purpose = 2;
    string spec = 3;
    int32 count = 4;
}

message DBAddHostRequest {
    DBHostInfoDTO host = 1;
}

message DBAddHostResponse {
    DBHostResponseStatus rs = 1;
    string HostId = 2;
}

message DBAddHostsInBatchRequest {
    repeated DBHostInfoDTO hosts = 1;
}

message DBAddHostsInBatchResponse {
    DBHostResponseStatus rs = 1;
    repeated string HostIds = 2;
}

message DBRemoveHostRequest {
    string hostId = 1;
}

message DBRemoveHostResponse {
    DBHostResponseStatus rs = 1;
}

message DBRemoveHostsInBatchRequest {
    repeated string hostIds = 1;
}

message DBRemoveHostsInBatchResponse {
    DBHostResponseStatus rs = 1;
}

message DBUpdateHostStatusRequest {
    int32 status = 1;
    repeated string hostIds = 2;
}

message DBUpdateHostStatusResponse {
    DBHostResponseStatus rs = 1;
}

message DBReserveHostRequest {
    bool reserved = 1;
    repeated string hostIds = 2;
}

message DBReserveHostResponse {
    DBHostResponseStatus rs = 1;
}

message DBListHostsRequest {
    int32 status = 1;
    int32 stat = 2;
    string purpose = 3;
    DBHostPageDTO page = 4;
}

message DBListHostsResponse {
    DBHostResponseStatus rs = 1;
    repeated DBHostInfoDTO hostList = 2;
    DBHostPageDTO page = 3;
}

message DBCheckDetailsRequest {
    string hostId = 1;
}

message DBCheckDetailsResponse {
    DBHostResponseStatus rs = 1;
    DBHostInfoDTO details = 2;
}

message DBAllocHostsRequest {
    repeated DBAllocationReq pdReq = 1;
    repeated DBAllocationReq tidbReq = 2;
    repeated DBAllocationReq tikvReq = 3;
}

message DBAllocHostsResponse {
    DBHostResponseStatus rs = 1;
    repeated DBAllocHostDTO pdHosts = 2;
    repeated DBAllocHostDTO tidbHosts = 3;
    repeated DBAllocHostDTO tikvHosts = 4;
}

message DBGetFailureDomainRequest {
    int32 failureDomainType = 1;
}

message DBGetFailureDomainResponse {
    DBHostResponseStatus rs = 1;
    repeated DBFailureDomainResource fdList = 2;
}

message DBHostFilter {
	string arch = 1;
	string purpose  = 2;
	string diskType = 3;
}

message DBGetHierarchyRequest {
    DBHostFilter filter = 1;
    int32 level = 2;
    int32 depth = 3;
}

message DBNode {
    string code = 1;
    string prefix = 2;
    string name = 3;
    repeated DBNode subNodes = 4;
}

message DBGetHierarchyResponse {
    DBHostResponseStatus rs = 1;
    DBNode root = 2;
}

message DBStockLocation {
	string region = 1;
	string zone = 2;
	string rack = 3;
	string host = 4;
}

message DBStockHostFilter {
    string arch = 1;
    int32 status = 2;
    int32 stat = 3;
}

message DBStockDiskFilter {
    string type = 1;
    int32 status = 2;
    int32 capacity = 3;
}

message DBGetStocksRequest {
    DBStockLocation location = 1;
    DBStockHostFilter hostFilter = 2;
    DBStockDiskFilter diskFilter = 3;
}

message DBStocks {
    int32 freeHostCount = 1;
    int32 freeCpuCores = 2;
    int32 freeMemory = 3;
    int32 freeDiskCount = 4;
    int32 freeDiskCapacity = 5;
}
message DBGetStocksResponse {
    DBHostResponseStatus rs = 1;
    DBStocks stocks = 2;
}