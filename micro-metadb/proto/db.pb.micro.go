// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: db.proto

package db

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TiCPDBService service

func NewTiCPDBServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TiCPDBService service

type TiCPDBService interface {
	// Auth Module
	FindTenant(ctx context.Context, in *FindTenantRequest, opts ...client.CallOption) (*FindTenantResponse, error)
	FindAccount(ctx context.Context, in *FindAccountRequest, opts ...client.CallOption) (*FindAccountResponse, error)
	SaveToken(ctx context.Context, in *SaveTokenRequest, opts ...client.CallOption) (*SaveTokenResponse, error)
	FindToken(ctx context.Context, in *FindTokenRequest, opts ...client.CallOption) (*FindTokenResponse, error)
	FindRolesByPermission(ctx context.Context, in *FindRolesByPermissionRequest, opts ...client.CallOption) (*FindRolesByPermissionResponse, error)
	// Host Module
	AddHost(ctx context.Context, in *AddHostRequest, opts ...client.CallOption) (*AddHostResponse, error)
	RemoveHost(ctx context.Context, in *RemoveHostRequest, opts ...client.CallOption) (*RemoveHostResponse, error)
	ListHost(ctx context.Context, in *ListHostsRequest, opts ...client.CallOption) (*ListHostsResponse, error)
	CheckDetails(ctx context.Context, in *CheckDetailsRequest, opts ...client.CallOption) (*CheckDetailsResponse, error)
	AllocHosts(ctx context.Context, in *AllocHostsRequest, opts ...client.CallOption) (*AllocHostResponse, error)
}

type tiCPDBService struct {
	c    client.Client
	name string
}

func NewTiCPDBService(name string, c client.Client) TiCPDBService {
	return &tiCPDBService{
		c:    c,
		name: name,
	}
}

func (c *tiCPDBService) FindTenant(ctx context.Context, in *FindTenantRequest, opts ...client.CallOption) (*FindTenantResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindTenant", in)
	out := new(FindTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindAccount(ctx context.Context, in *FindAccountRequest, opts ...client.CallOption) (*FindAccountResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindAccount", in)
	out := new(FindAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) SaveToken(ctx context.Context, in *SaveTokenRequest, opts ...client.CallOption) (*SaveTokenResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.SaveToken", in)
	out := new(SaveTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindToken(ctx context.Context, in *FindTokenRequest, opts ...client.CallOption) (*FindTokenResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindToken", in)
	out := new(FindTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindRolesByPermission(ctx context.Context, in *FindRolesByPermissionRequest, opts ...client.CallOption) (*FindRolesByPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindRolesByPermission", in)
	out := new(FindRolesByPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) AddHost(ctx context.Context, in *AddHostRequest, opts ...client.CallOption) (*AddHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.AddHost", in)
	out := new(AddHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) RemoveHost(ctx context.Context, in *RemoveHostRequest, opts ...client.CallOption) (*RemoveHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.RemoveHost", in)
	out := new(RemoveHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) ListHost(ctx context.Context, in *ListHostsRequest, opts ...client.CallOption) (*ListHostsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.ListHost", in)
	out := new(ListHostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CheckDetails(ctx context.Context, in *CheckDetailsRequest, opts ...client.CallOption) (*CheckDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CheckDetails", in)
	out := new(CheckDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) AllocHosts(ctx context.Context, in *AllocHostsRequest, opts ...client.CallOption) (*AllocHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.AllocHosts", in)
	out := new(AllocHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TiCPDBService service

type TiCPDBServiceHandler interface {
	// Auth Module
	FindTenant(context.Context, *FindTenantRequest, *FindTenantResponse) error
	FindAccount(context.Context, *FindAccountRequest, *FindAccountResponse) error
	SaveToken(context.Context, *SaveTokenRequest, *SaveTokenResponse) error
	FindToken(context.Context, *FindTokenRequest, *FindTokenResponse) error
	FindRolesByPermission(context.Context, *FindRolesByPermissionRequest, *FindRolesByPermissionResponse) error
	// Host Module
	AddHost(context.Context, *AddHostRequest, *AddHostResponse) error
	RemoveHost(context.Context, *RemoveHostRequest, *RemoveHostResponse) error
	ListHost(context.Context, *ListHostsRequest, *ListHostsResponse) error
	CheckDetails(context.Context, *CheckDetailsRequest, *CheckDetailsResponse) error
	AllocHosts(context.Context, *AllocHostsRequest, *AllocHostResponse) error
}

func RegisterTiCPDBServiceHandler(s server.Server, hdlr TiCPDBServiceHandler, opts ...server.HandlerOption) error {
	type tiCPDBService interface {
		FindTenant(ctx context.Context, in *FindTenantRequest, out *FindTenantResponse) error
		FindAccount(ctx context.Context, in *FindAccountRequest, out *FindAccountResponse) error
		SaveToken(ctx context.Context, in *SaveTokenRequest, out *SaveTokenResponse) error
		FindToken(ctx context.Context, in *FindTokenRequest, out *FindTokenResponse) error
		FindRolesByPermission(ctx context.Context, in *FindRolesByPermissionRequest, out *FindRolesByPermissionResponse) error
		AddHost(ctx context.Context, in *AddHostRequest, out *AddHostResponse) error
		RemoveHost(ctx context.Context, in *RemoveHostRequest, out *RemoveHostResponse) error
		ListHost(ctx context.Context, in *ListHostsRequest, out *ListHostsResponse) error
		CheckDetails(ctx context.Context, in *CheckDetailsRequest, out *CheckDetailsResponse) error
		AllocHosts(ctx context.Context, in *AllocHostsRequest, out *AllocHostResponse) error
	}
	type TiCPDBService struct {
		tiCPDBService
	}
	h := &tiCPDBServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TiCPDBService{h}, opts...))
}

type tiCPDBServiceHandler struct {
	TiCPDBServiceHandler
}

func (h *tiCPDBServiceHandler) FindTenant(ctx context.Context, in *FindTenantRequest, out *FindTenantResponse) error {
	return h.TiCPDBServiceHandler.FindTenant(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindAccount(ctx context.Context, in *FindAccountRequest, out *FindAccountResponse) error {
	return h.TiCPDBServiceHandler.FindAccount(ctx, in, out)
}

func (h *tiCPDBServiceHandler) SaveToken(ctx context.Context, in *SaveTokenRequest, out *SaveTokenResponse) error {
	return h.TiCPDBServiceHandler.SaveToken(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindToken(ctx context.Context, in *FindTokenRequest, out *FindTokenResponse) error {
	return h.TiCPDBServiceHandler.FindToken(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindRolesByPermission(ctx context.Context, in *FindRolesByPermissionRequest, out *FindRolesByPermissionResponse) error {
	return h.TiCPDBServiceHandler.FindRolesByPermission(ctx, in, out)
}

func (h *tiCPDBServiceHandler) AddHost(ctx context.Context, in *AddHostRequest, out *AddHostResponse) error {
	return h.TiCPDBServiceHandler.AddHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) RemoveHost(ctx context.Context, in *RemoveHostRequest, out *RemoveHostResponse) error {
	return h.TiCPDBServiceHandler.RemoveHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) ListHost(ctx context.Context, in *ListHostsRequest, out *ListHostsResponse) error {
	return h.TiCPDBServiceHandler.ListHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CheckDetails(ctx context.Context, in *CheckDetailsRequest, out *CheckDetailsResponse) error {
	return h.TiCPDBServiceHandler.CheckDetails(ctx, in, out)
}

func (h *tiCPDBServiceHandler) AllocHosts(ctx context.Context, in *AllocHostsRequest, out *AllocHostResponse) error {
	return h.TiCPDBServiceHandler.AllocHosts(ctx, in, out)
}
