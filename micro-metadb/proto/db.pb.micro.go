// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: db.proto

package db

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TiCPDBService service

func NewTiCPDBServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TiCPDBService service

type TiCPDBService interface {
	// Auth Module
	FindTenant(ctx context.Context, in *DBFindTenantRequest, opts ...client.CallOption) (*DBFindTenantResponse, error)
	FindAccount(ctx context.Context, in *DBFindAccountRequest, opts ...client.CallOption) (*DBFindAccountResponse, error)
	SaveToken(ctx context.Context, in *DBSaveTokenRequest, opts ...client.CallOption) (*DBSaveTokenResponse, error)
	FindToken(ctx context.Context, in *DBFindTokenRequest, opts ...client.CallOption) (*DBFindTokenResponse, error)
	FindRolesByPermission(ctx context.Context, in *DBFindRolesByPermissionRequest, opts ...client.CallOption) (*DBFindRolesByPermissionResponse, error)
	// Host Module
	AddHost(ctx context.Context, in *DBAddHostRequest, opts ...client.CallOption) (*DBAddHostResponse, error)
	AddHostsInBatch(ctx context.Context, in *DBAddHostsInBatchRequest, opts ...client.CallOption) (*DBAddHostsInBatchResponse, error)
	RemoveHost(ctx context.Context, in *DBRemoveHostRequest, opts ...client.CallOption) (*DBRemoveHostResponse, error)
	RemoveHostsInBatch(ctx context.Context, in *DBRemoveHostsInBatchRequest, opts ...client.CallOption) (*DBRemoveHostsInBatchResponse, error)
	ListHost(ctx context.Context, in *DBListHostsRequest, opts ...client.CallOption) (*DBListHostsResponse, error)
	CheckDetails(ctx context.Context, in *DBCheckDetailsRequest, opts ...client.CallOption) (*DBCheckDetailsResponse, error)
	AllocHosts(ctx context.Context, in *DBAllocHostsRequest, opts ...client.CallOption) (*DBAllocHostResponse, error)
	// Cluster
	CreateCluster(ctx context.Context, in *DBCreateClusterRequest, opts ...client.CallOption) (*DBCreateClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DBDeleteClusterRequest, opts ...client.CallOption) (*DBDeleteClusterResponse, error)
	UpdateClusterStatus(ctx context.Context, in *DBUpdateClusterStatusRequest, opts ...client.CallOption) (*DBUpdateClusterStatusResponse, error)
	UpdateClusterTiupConfig(ctx context.Context, in *DBUpdateTiupConfigRequest, opts ...client.CallOption) (*DBUpdateTiupConfigResponse, error)
	LoadCluster(ctx context.Context, in *DBLoadClusterRequest, opts ...client.CallOption) (*DBLoadClusterResponse, error)
	ListCluster(ctx context.Context, in *DBListClusterRequest, opts ...client.CallOption) (*DBListClusterResponse, error)
	// Tiup Task
	CreateTiupTask(ctx context.Context, in *CreateTiupTaskRequest, opts ...client.CallOption) (*CreateTiupTaskResponse, error)
	UpdateTiupTask(ctx context.Context, in *UpdateTiupTaskRequest, opts ...client.CallOption) (*UpdateTiupTaskResponse, error)
	FindTiupTaskByID(ctx context.Context, in *FindTiupTaskByIDRequest, opts ...client.CallOption) (*FindTiupTaskByIDResponse, error)
	GetTiupTaskStatusByBizID(ctx context.Context, in *GetTiupTaskStatusByBizIDRequest, opts ...client.CallOption) (*GetTiupTaskStatusByBizIDResponse, error)
	// Workflow and Task
	CreateFlow(ctx context.Context, in *DBCreateFlowRequest, opts ...client.CallOption) (*DBCreateFlowResponse, error)
	CreateTask(ctx context.Context, in *DBCreateTaskRequest, opts ...client.CallOption) (*DBCreateTaskResponse, error)
	UpdateFlow(ctx context.Context, in *DBUpdateFlowRequest, opts ...client.CallOption) (*DBUpdateFlowResponse, error)
	UpdateTask(ctx context.Context, in *DBUpdateTaskRequest, opts ...client.CallOption) (*DBUpdateTaskResponse, error)
	LoadFlow(ctx context.Context, in *DBLoadFlowRequest, opts ...client.CallOption) (*DBLoadFlowResponse, error)
	LoadTask(ctx context.Context, in *DBLoadTaskRequest, opts ...client.CallOption) (*DBLoadTaskResponse, error)
}

type tiCPDBService struct {
	c    client.Client
	name string
}

func NewTiCPDBService(name string, c client.Client) TiCPDBService {
	return &tiCPDBService{
		c:    c,
		name: name,
	}
}

func (c *tiCPDBService) FindTenant(ctx context.Context, in *DBFindTenantRequest, opts ...client.CallOption) (*DBFindTenantResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindTenant", in)
	out := new(DBFindTenantResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindAccount(ctx context.Context, in *DBFindAccountRequest, opts ...client.CallOption) (*DBFindAccountResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindAccount", in)
	out := new(DBFindAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) SaveToken(ctx context.Context, in *DBSaveTokenRequest, opts ...client.CallOption) (*DBSaveTokenResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.SaveToken", in)
	out := new(DBSaveTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindToken(ctx context.Context, in *DBFindTokenRequest, opts ...client.CallOption) (*DBFindTokenResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindToken", in)
	out := new(DBFindTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindRolesByPermission(ctx context.Context, in *DBFindRolesByPermissionRequest, opts ...client.CallOption) (*DBFindRolesByPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindRolesByPermission", in)
	out := new(DBFindRolesByPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) AddHost(ctx context.Context, in *DBAddHostRequest, opts ...client.CallOption) (*DBAddHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.AddHost", in)
	out := new(DBAddHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) AddHostsInBatch(ctx context.Context, in *DBAddHostsInBatchRequest, opts ...client.CallOption) (*DBAddHostsInBatchResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.AddHostsInBatch", in)
	out := new(DBAddHostsInBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) RemoveHost(ctx context.Context, in *DBRemoveHostRequest, opts ...client.CallOption) (*DBRemoveHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.RemoveHost", in)
	out := new(DBRemoveHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) RemoveHostsInBatch(ctx context.Context, in *DBRemoveHostsInBatchRequest, opts ...client.CallOption) (*DBRemoveHostsInBatchResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.RemoveHostsInBatch", in)
	out := new(DBRemoveHostsInBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) ListHost(ctx context.Context, in *DBListHostsRequest, opts ...client.CallOption) (*DBListHostsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.ListHost", in)
	out := new(DBListHostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CheckDetails(ctx context.Context, in *DBCheckDetailsRequest, opts ...client.CallOption) (*DBCheckDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CheckDetails", in)
	out := new(DBCheckDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) AllocHosts(ctx context.Context, in *DBAllocHostsRequest, opts ...client.CallOption) (*DBAllocHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.AllocHosts", in)
	out := new(DBAllocHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CreateCluster(ctx context.Context, in *DBCreateClusterRequest, opts ...client.CallOption) (*DBCreateClusterResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CreateCluster", in)
	out := new(DBCreateClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) DeleteCluster(ctx context.Context, in *DBDeleteClusterRequest, opts ...client.CallOption) (*DBDeleteClusterResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.DeleteCluster", in)
	out := new(DBDeleteClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) UpdateClusterStatus(ctx context.Context, in *DBUpdateClusterStatusRequest, opts ...client.CallOption) (*DBUpdateClusterStatusResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.UpdateClusterStatus", in)
	out := new(DBUpdateClusterStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) UpdateClusterTiupConfig(ctx context.Context, in *DBUpdateTiupConfigRequest, opts ...client.CallOption) (*DBUpdateTiupConfigResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.UpdateClusterTiupConfig", in)
	out := new(DBUpdateTiupConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) LoadCluster(ctx context.Context, in *DBLoadClusterRequest, opts ...client.CallOption) (*DBLoadClusterResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.LoadCluster", in)
	out := new(DBLoadClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) ListCluster(ctx context.Context, in *DBListClusterRequest, opts ...client.CallOption) (*DBListClusterResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.ListCluster", in)
	out := new(DBListClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CreateTiupTask(ctx context.Context, in *CreateTiupTaskRequest, opts ...client.CallOption) (*CreateTiupTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CreateTiupTask", in)
	out := new(CreateTiupTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) UpdateTiupTask(ctx context.Context, in *UpdateTiupTaskRequest, opts ...client.CallOption) (*UpdateTiupTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.UpdateTiupTask", in)
	out := new(UpdateTiupTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) FindTiupTaskByID(ctx context.Context, in *FindTiupTaskByIDRequest, opts ...client.CallOption) (*FindTiupTaskByIDResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.FindTiupTaskByID", in)
	out := new(FindTiupTaskByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) GetTiupTaskStatusByBizID(ctx context.Context, in *GetTiupTaskStatusByBizIDRequest, opts ...client.CallOption) (*GetTiupTaskStatusByBizIDResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.GetTiupTaskStatusByBizID", in)
	out := new(GetTiupTaskStatusByBizIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CreateFlow(ctx context.Context, in *DBCreateFlowRequest, opts ...client.CallOption) (*DBCreateFlowResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CreateFlow", in)
	out := new(DBCreateFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) CreateTask(ctx context.Context, in *DBCreateTaskRequest, opts ...client.CallOption) (*DBCreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.CreateTask", in)
	out := new(DBCreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) UpdateFlow(ctx context.Context, in *DBUpdateFlowRequest, opts ...client.CallOption) (*DBUpdateFlowResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.UpdateFlow", in)
	out := new(DBUpdateFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) UpdateTask(ctx context.Context, in *DBUpdateTaskRequest, opts ...client.CallOption) (*DBUpdateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.UpdateTask", in)
	out := new(DBUpdateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) LoadFlow(ctx context.Context, in *DBLoadFlowRequest, opts ...client.CallOption) (*DBLoadFlowResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.LoadFlow", in)
	out := new(DBLoadFlowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPDBService) LoadTask(ctx context.Context, in *DBLoadTaskRequest, opts ...client.CallOption) (*DBLoadTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPDBService.LoadTask", in)
	out := new(DBLoadTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TiCPDBService service

type TiCPDBServiceHandler interface {
	// Auth Module
	FindTenant(context.Context, *DBFindTenantRequest, *DBFindTenantResponse) error
	FindAccount(context.Context, *DBFindAccountRequest, *DBFindAccountResponse) error
	SaveToken(context.Context, *DBSaveTokenRequest, *DBSaveTokenResponse) error
	FindToken(context.Context, *DBFindTokenRequest, *DBFindTokenResponse) error
	FindRolesByPermission(context.Context, *DBFindRolesByPermissionRequest, *DBFindRolesByPermissionResponse) error
	// Host Module
	AddHost(context.Context, *DBAddHostRequest, *DBAddHostResponse) error
	AddHostsInBatch(context.Context, *DBAddHostsInBatchRequest, *DBAddHostsInBatchResponse) error
	RemoveHost(context.Context, *DBRemoveHostRequest, *DBRemoveHostResponse) error
	RemoveHostsInBatch(context.Context, *DBRemoveHostsInBatchRequest, *DBRemoveHostsInBatchResponse) error
	ListHost(context.Context, *DBListHostsRequest, *DBListHostsResponse) error
	CheckDetails(context.Context, *DBCheckDetailsRequest, *DBCheckDetailsResponse) error
	AllocHosts(context.Context, *DBAllocHostsRequest, *DBAllocHostResponse) error
	// Cluster
	CreateCluster(context.Context, *DBCreateClusterRequest, *DBCreateClusterResponse) error
	DeleteCluster(context.Context, *DBDeleteClusterRequest, *DBDeleteClusterResponse) error
	UpdateClusterStatus(context.Context, *DBUpdateClusterStatusRequest, *DBUpdateClusterStatusResponse) error
	UpdateClusterTiupConfig(context.Context, *DBUpdateTiupConfigRequest, *DBUpdateTiupConfigResponse) error
	LoadCluster(context.Context, *DBLoadClusterRequest, *DBLoadClusterResponse) error
	ListCluster(context.Context, *DBListClusterRequest, *DBListClusterResponse) error
	// Tiup Task
	CreateTiupTask(context.Context, *CreateTiupTaskRequest, *CreateTiupTaskResponse) error
	UpdateTiupTask(context.Context, *UpdateTiupTaskRequest, *UpdateTiupTaskResponse) error
	FindTiupTaskByID(context.Context, *FindTiupTaskByIDRequest, *FindTiupTaskByIDResponse) error
	GetTiupTaskStatusByBizID(context.Context, *GetTiupTaskStatusByBizIDRequest, *GetTiupTaskStatusByBizIDResponse) error
	// Workflow and Task
	CreateFlow(context.Context, *DBCreateFlowRequest, *DBCreateFlowResponse) error
	CreateTask(context.Context, *DBCreateTaskRequest, *DBCreateTaskResponse) error
	UpdateFlow(context.Context, *DBUpdateFlowRequest, *DBUpdateFlowResponse) error
	UpdateTask(context.Context, *DBUpdateTaskRequest, *DBUpdateTaskResponse) error
	LoadFlow(context.Context, *DBLoadFlowRequest, *DBLoadFlowResponse) error
	LoadTask(context.Context, *DBLoadTaskRequest, *DBLoadTaskResponse) error
}

func RegisterTiCPDBServiceHandler(s server.Server, hdlr TiCPDBServiceHandler, opts ...server.HandlerOption) error {
	type tiCPDBService interface {
		FindTenant(ctx context.Context, in *DBFindTenantRequest, out *DBFindTenantResponse) error
		FindAccount(ctx context.Context, in *DBFindAccountRequest, out *DBFindAccountResponse) error
		SaveToken(ctx context.Context, in *DBSaveTokenRequest, out *DBSaveTokenResponse) error
		FindToken(ctx context.Context, in *DBFindTokenRequest, out *DBFindTokenResponse) error
		FindRolesByPermission(ctx context.Context, in *DBFindRolesByPermissionRequest, out *DBFindRolesByPermissionResponse) error
		AddHost(ctx context.Context, in *DBAddHostRequest, out *DBAddHostResponse) error
		AddHostsInBatch(ctx context.Context, in *DBAddHostsInBatchRequest, out *DBAddHostsInBatchResponse) error
		RemoveHost(ctx context.Context, in *DBRemoveHostRequest, out *DBRemoveHostResponse) error
		RemoveHostsInBatch(ctx context.Context, in *DBRemoveHostsInBatchRequest, out *DBRemoveHostsInBatchResponse) error
		ListHost(ctx context.Context, in *DBListHostsRequest, out *DBListHostsResponse) error
		CheckDetails(ctx context.Context, in *DBCheckDetailsRequest, out *DBCheckDetailsResponse) error
		AllocHosts(ctx context.Context, in *DBAllocHostsRequest, out *DBAllocHostResponse) error
		CreateCluster(ctx context.Context, in *DBCreateClusterRequest, out *DBCreateClusterResponse) error
		DeleteCluster(ctx context.Context, in *DBDeleteClusterRequest, out *DBDeleteClusterResponse) error
		UpdateClusterStatus(ctx context.Context, in *DBUpdateClusterStatusRequest, out *DBUpdateClusterStatusResponse) error
		UpdateClusterTiupConfig(ctx context.Context, in *DBUpdateTiupConfigRequest, out *DBUpdateTiupConfigResponse) error
		LoadCluster(ctx context.Context, in *DBLoadClusterRequest, out *DBLoadClusterResponse) error
		ListCluster(ctx context.Context, in *DBListClusterRequest, out *DBListClusterResponse) error
		CreateTiupTask(ctx context.Context, in *CreateTiupTaskRequest, out *CreateTiupTaskResponse) error
		UpdateTiupTask(ctx context.Context, in *UpdateTiupTaskRequest, out *UpdateTiupTaskResponse) error
		FindTiupTaskByID(ctx context.Context, in *FindTiupTaskByIDRequest, out *FindTiupTaskByIDResponse) error
		GetTiupTaskStatusByBizID(ctx context.Context, in *GetTiupTaskStatusByBizIDRequest, out *GetTiupTaskStatusByBizIDResponse) error
		CreateFlow(ctx context.Context, in *DBCreateFlowRequest, out *DBCreateFlowResponse) error
		CreateTask(ctx context.Context, in *DBCreateTaskRequest, out *DBCreateTaskResponse) error
		UpdateFlow(ctx context.Context, in *DBUpdateFlowRequest, out *DBUpdateFlowResponse) error
		UpdateTask(ctx context.Context, in *DBUpdateTaskRequest, out *DBUpdateTaskResponse) error
		LoadFlow(ctx context.Context, in *DBLoadFlowRequest, out *DBLoadFlowResponse) error
		LoadTask(ctx context.Context, in *DBLoadTaskRequest, out *DBLoadTaskResponse) error
	}
	type TiCPDBService struct {
		tiCPDBService
	}
	h := &tiCPDBServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TiCPDBService{h}, opts...))
}

type tiCPDBServiceHandler struct {
	TiCPDBServiceHandler
}

func (h *tiCPDBServiceHandler) FindTenant(ctx context.Context, in *DBFindTenantRequest, out *DBFindTenantResponse) error {
	return h.TiCPDBServiceHandler.FindTenant(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindAccount(ctx context.Context, in *DBFindAccountRequest, out *DBFindAccountResponse) error {
	return h.TiCPDBServiceHandler.FindAccount(ctx, in, out)
}

func (h *tiCPDBServiceHandler) SaveToken(ctx context.Context, in *DBSaveTokenRequest, out *DBSaveTokenResponse) error {
	return h.TiCPDBServiceHandler.SaveToken(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindToken(ctx context.Context, in *DBFindTokenRequest, out *DBFindTokenResponse) error {
	return h.TiCPDBServiceHandler.FindToken(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindRolesByPermission(ctx context.Context, in *DBFindRolesByPermissionRequest, out *DBFindRolesByPermissionResponse) error {
	return h.TiCPDBServiceHandler.FindRolesByPermission(ctx, in, out)
}

func (h *tiCPDBServiceHandler) AddHost(ctx context.Context, in *DBAddHostRequest, out *DBAddHostResponse) error {
	return h.TiCPDBServiceHandler.AddHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) AddHostsInBatch(ctx context.Context, in *DBAddHostsInBatchRequest, out *DBAddHostsInBatchResponse) error {
	return h.TiCPDBServiceHandler.AddHostsInBatch(ctx, in, out)
}

func (h *tiCPDBServiceHandler) RemoveHost(ctx context.Context, in *DBRemoveHostRequest, out *DBRemoveHostResponse) error {
	return h.TiCPDBServiceHandler.RemoveHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) RemoveHostsInBatch(ctx context.Context, in *DBRemoveHostsInBatchRequest, out *DBRemoveHostsInBatchResponse) error {
	return h.TiCPDBServiceHandler.RemoveHostsInBatch(ctx, in, out)
}

func (h *tiCPDBServiceHandler) ListHost(ctx context.Context, in *DBListHostsRequest, out *DBListHostsResponse) error {
	return h.TiCPDBServiceHandler.ListHost(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CheckDetails(ctx context.Context, in *DBCheckDetailsRequest, out *DBCheckDetailsResponse) error {
	return h.TiCPDBServiceHandler.CheckDetails(ctx, in, out)
}

func (h *tiCPDBServiceHandler) AllocHosts(ctx context.Context, in *DBAllocHostsRequest, out *DBAllocHostResponse) error {
	return h.TiCPDBServiceHandler.AllocHosts(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CreateCluster(ctx context.Context, in *DBCreateClusterRequest, out *DBCreateClusterResponse) error {
	return h.TiCPDBServiceHandler.CreateCluster(ctx, in, out)
}

func (h *tiCPDBServiceHandler) DeleteCluster(ctx context.Context, in *DBDeleteClusterRequest, out *DBDeleteClusterResponse) error {
	return h.TiCPDBServiceHandler.DeleteCluster(ctx, in, out)
}

func (h *tiCPDBServiceHandler) UpdateClusterStatus(ctx context.Context, in *DBUpdateClusterStatusRequest, out *DBUpdateClusterStatusResponse) error {
	return h.TiCPDBServiceHandler.UpdateClusterStatus(ctx, in, out)
}

func (h *tiCPDBServiceHandler) UpdateClusterTiupConfig(ctx context.Context, in *DBUpdateTiupConfigRequest, out *DBUpdateTiupConfigResponse) error {
	return h.TiCPDBServiceHandler.UpdateClusterTiupConfig(ctx, in, out)
}

func (h *tiCPDBServiceHandler) LoadCluster(ctx context.Context, in *DBLoadClusterRequest, out *DBLoadClusterResponse) error {
	return h.TiCPDBServiceHandler.LoadCluster(ctx, in, out)
}

func (h *tiCPDBServiceHandler) ListCluster(ctx context.Context, in *DBListClusterRequest, out *DBListClusterResponse) error {
	return h.TiCPDBServiceHandler.ListCluster(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CreateTiupTask(ctx context.Context, in *CreateTiupTaskRequest, out *CreateTiupTaskResponse) error {
	return h.TiCPDBServiceHandler.CreateTiupTask(ctx, in, out)
}

func (h *tiCPDBServiceHandler) UpdateTiupTask(ctx context.Context, in *UpdateTiupTaskRequest, out *UpdateTiupTaskResponse) error {
	return h.TiCPDBServiceHandler.UpdateTiupTask(ctx, in, out)
}

func (h *tiCPDBServiceHandler) FindTiupTaskByID(ctx context.Context, in *FindTiupTaskByIDRequest, out *FindTiupTaskByIDResponse) error {
	return h.TiCPDBServiceHandler.FindTiupTaskByID(ctx, in, out)
}

func (h *tiCPDBServiceHandler) GetTiupTaskStatusByBizID(ctx context.Context, in *GetTiupTaskStatusByBizIDRequest, out *GetTiupTaskStatusByBizIDResponse) error {
	return h.TiCPDBServiceHandler.GetTiupTaskStatusByBizID(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CreateFlow(ctx context.Context, in *DBCreateFlowRequest, out *DBCreateFlowResponse) error {
	return h.TiCPDBServiceHandler.CreateFlow(ctx, in, out)
}

func (h *tiCPDBServiceHandler) CreateTask(ctx context.Context, in *DBCreateTaskRequest, out *DBCreateTaskResponse) error {
	return h.TiCPDBServiceHandler.CreateTask(ctx, in, out)
}

func (h *tiCPDBServiceHandler) UpdateFlow(ctx context.Context, in *DBUpdateFlowRequest, out *DBUpdateFlowResponse) error {
	return h.TiCPDBServiceHandler.UpdateFlow(ctx, in, out)
}

func (h *tiCPDBServiceHandler) UpdateTask(ctx context.Context, in *DBUpdateTaskRequest, out *DBUpdateTaskResponse) error {
	return h.TiCPDBServiceHandler.UpdateTask(ctx, in, out)
}

func (h *tiCPDBServiceHandler) LoadFlow(ctx context.Context, in *DBLoadFlowRequest, out *DBLoadFlowResponse) error {
	return h.TiCPDBServiceHandler.LoadFlow(ctx, in, out)
}

func (h *tiCPDBServiceHandler) LoadTask(ctx context.Context, in *DBLoadTaskRequest, out *DBLoadTaskResponse) error {
	return h.TiCPDBServiceHandler.LoadTask(ctx, in, out)
}
