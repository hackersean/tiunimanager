basePath: /api/v1/
definitions:
  account.UserProfile:
    properties:
      tenantId:
        type: string
      userName:
        type: string
    type: object
  backuprestore.RestoreReq:
    properties:
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuArchitecture:
        type: string
      dbPassword:
        type: string
      exclusive:
        type: boolean
      nodeDemandList:
        items:
          $ref: '#/definitions/management.ClusterNodeDemand'
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      region:
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  cluster.CloneClusterReq:
    properties:
      backupId:
        type: string
      cloneStrategy:
        description: specify clone strategy, include empty, snapshot and sync, default empty(option)
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster, default is the root user, which is not valid for Data Migration clusters
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources, when exclusive, a host will only deploy instances of the same cluster, which may result in poor resource utilization
        type: boolean
      paramGroupId:
        description: specify cloned cluster parameter group id(option)
        type: integer
      region:
        description: The Region where the cluster is located
        type: string
      sourceClusterId:
        description: specify source cluster id(require)
        type: string
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  cluster.CloneClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.CreateChangeFeedTaskReq:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: 415241823337054209
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: "1"
        type: string
      updateTime:
        type: string
    type: object
  cluster.CreateChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIEM____22
        type: string
    type: object
  cluster.CreateClusterReq:
    properties:
      backupId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster, default is the root user, which is not valid for Data Migration clusters
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources, when exclusive, a host will only deploy instances of the same cluster, which may result in poor resource utilization
        type: boolean
      region:
        description: The Region where the cluster is located
        type: string
      resourceParameters:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameter'
        type: array
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  cluster.CreateClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DeleteBackupDataReq:
    properties:
      backupId:
        type: string
      backupMode:
        type: string
      clusterId:
        type: string
    type: object
  cluster.DeleteBackupDataResp:
    type: object
  cluster.DeleteChangeFeedTaskResp:
    properties:
      id:
        example: TASK_ID_IN_TIEM____22
        type: string
      status:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        example: 1
        type: integer
    type: object
  cluster.DeleteClusterReq:
    properties:
      autoBackup:
        type: boolean
      clearBackupData:
        type: boolean
      clusterID:
        type: string
    type: object
  cluster.DeleteClusterResp:
    properties:
      clusterID:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.DetailChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: 415241823337054209
        type: integer
      downstreamSyncTs:
        example: 415241823337054209
        type: integer
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: 415241823337054209
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: "1"
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: 415241823337054209
        type: integer
    type: object
  cluster.GetBackupStrategyResp:
    properties:
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.PauseChangeFeedTaskResp:
    properties:
      status:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        example: 1
        type: integer
    type: object
  cluster.QueryBackupRecordsResp:
    properties:
      backupRecords:
        items:
          $ref: '#/definitions/structs.BackupRecord'
        type: array
    type: object
  cluster.QueryChangeFeedTaskResp:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamFetchTs:
        example: 415241823337054209
        type: integer
      downstreamSyncTs:
        example: 415241823337054209
        type: integer
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: 415241823337054209
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: "1"
        type: string
      unsteady:
        example: false
        type: boolean
      updateTime:
        type: string
      upstreamUpdateTs:
        example: 415241823337054209
        type: integer
    type: object
  cluster.QueryClusterDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.ClusterInfo'
      topology:
        items:
          $ref: '#/definitions/structs.ClusterInstanceInfo'
        type: array
    type: object
  cluster.ResumeChangeFeedTaskResp:
    properties:
      status:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        example: 1
        type: integer
    type: object
  cluster.SaveBackupStrategyReq:
    properties:
      clusterId:
        type: string
      strategy:
        $ref: '#/definitions/structs.BackupStrategy'
    type: object
  cluster.SaveBackupStrategyResp:
    type: object
  cluster.ScaleInClusterReq:
    properties:
      clusterId:
        type: string
      instanceId:
        type: string
    type: object
  cluster.ScaleInClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.ScaleOutClusterReq:
    properties:
      clusterId:
        type: string
      compute:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
    type: object
  cluster.ScaleOutClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.StopClusterResp:
    properties:
      clusterId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  cluster.UpdateChangeFeedTaskReq:
    properties:
      clusterId:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      createTime:
        type: string
      downstream:
        type: object
      downstreamType:
        enum:
        - tidb
        - kafka
        - mysql
        example: tidb
        type: string
      id:
        example: CLUSTER_ID_IN_TIEM__22
        type: string
      name:
        example: my_sync_name
        type: string
      rules:
        example:
        - '*.*'
        items:
          type: string
        type: array
      startTS:
        example: 415241823337054209
        type: integer
      status:
        enum:
        - Initial
        - Normal
        - Stopped
        - Finished
        - Error
        - Failed
        example: "1"
        type: string
      updateTime:
        type: string
    type: object
  cluster.UpdateChangeFeedTaskResp:
    properties:
      status:
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        example: 1
        type: integer
    type: object
  controller.CommonResult:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  controller.Page:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  controller.ResultWithPage:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
      page:
        $ref: '#/definitions/controller.Page'
    type: object
  controller.StatusInfo:
    properties:
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  controller.Usage:
    properties:
      total:
        type: number
      usageRate:
        type: number
      used:
        type: number
    type: object
  hostresource.AllocHostsReq:
    properties:
      pdReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
      tidbReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
      tikvReq:
        items:
          $ref: '#/definitions/hostresource.Allocation'
        type: array
    type: object
  hostresource.AllocHostsRsp:
    properties:
      pdHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
      tidbHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
      tikvHosts:
        items:
          $ref: '#/definitions/hostresource.AllocateRsp'
        type: array
    type: object
  hostresource.AllocateRsp:
    properties:
      cpuCore:
        type: integer
      disk:
        $ref: '#/definitions/hostresource.DiskInfo'
      hostName:
        type: string
      ip:
        type: string
      memory:
        type: integer
      passwd:
        type: string
      userName:
        type: string
    type: object
  hostresource.Allocation:
    properties:
      count:
        type: integer
      cpuCores:
        type: integer
      failureDomain:
        type: string
      memory:
        type: integer
    type: object
  hostresource.DiskInfo:
    properties:
      capacity:
        description: 'Disk size, Unit: GB'
        type: integer
      diskId:
        type: string
      hostId:
        type: string
      name:
        description: '[sda/sdb/nvmep0...]'
        type: string
      path:
        description: 'Disk mount path: [/data1]'
        type: string
      status:
        description: Disk Status, 0 for available, 1 for inused
        type: integer
      type:
        description: 'Disk type: [nvme-ssd/ssd/sata]'
        type: string
      usedBy:
        type: string
    type: object
  hostresource.HostInfo:
    properties:
      arch:
        description: x86 or arm64
        type: string
      az:
        type: string
      clusterType:
        description: What cluster is the host used for? [database/datamigration]
        type: string
      cpuCores:
        description: Host cpu cores spec, init while importing
        type: integer
      createTime:
        type: integer
      diskType:
        description: Disk type of this host [sata/ssd/nvme_ssd]
        type: string
      disks:
        items:
          $ref: '#/definitions/hostresource.DiskInfo'
        type: array
      freeCpuCores:
        description: Unused CpuCore, used for allocation
        type: integer
      freeMemory:
        description: Unused memory size, Unit:GB, used for allocation
        type: integer
      hostId:
        type: string
      hostName:
        type: string
      ip:
        type: string
      kernel:
        type: string
      loadStat:
        description: Host Resource Stat, 0 for loadless, 1 for inused, 2 for exhaust
        type: integer
      memory:
        description: Host memroy, init while importing
        type: integer
      nic:
        description: 'Host network type: 1GE or 10GE'
        type: string
      os:
        type: string
      passwd:
        type: string
      purpose:
        description: What Purpose is the host used for? [compute/storage/general]
        type: string
      rack:
        type: string
      region:
        type: string
      reserved:
        description: Whether this host is reserved - will not be allocated
        type: boolean
      spec:
        description: Host Spec, init while importing
        type: string
      status:
        description: Host Status, 0 for Online, 1 for offline
        type: integer
      sysLabels:
        items:
          type: string
        type: array
      traits:
        description: Traits of labels
        type: integer
      updateTime:
        type: integer
      userName:
        type: string
    type: object
  hostresource.UpdateHostReq:
    properties:
      reserved:
        type: boolean
      status:
        type: integer
    type: object
  identification.LoginInfo:
    properties:
      userName:
        type: string
      userPassword:
        type: string
    type: object
  identification.UserIdentity:
    properties:
      tenantId:
        type: string
      token:
        type: string
      userName:
        type: string
    type: object
  knowledge.ClusterComponent:
    properties:
      componentName:
        type: string
      componentPurpose:
        type: string
      componentType:
        type: string
    type: object
  knowledge.ClusterComponentSpec:
    properties:
      clusterComponent:
        $ref: '#/definitions/knowledge.ClusterComponent'
      componentConstraint:
        $ref: '#/definitions/knowledge.ComponentConstraint'
      componentPortConstraint:
        $ref: '#/definitions/knowledge.ComponentPortConstraint'
    type: object
  knowledge.ClusterType:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterTypeSpec:
    properties:
      clusterType:
        $ref: '#/definitions/knowledge.ClusterType'
      versionSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterVersionSpec'
        type: array
    type: object
  knowledge.ClusterVersion:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  knowledge.ClusterVersionSpec:
    properties:
      archTypes:
        items:
          type: string
        type: array
      clusterPortConstraint:
        $ref: '#/definitions/knowledge.ComponentPortConstraint'
      clusterVersion:
        $ref: '#/definitions/knowledge.ClusterVersion'
      componentSpecs:
        items:
          $ref: '#/definitions/knowledge.ClusterComponentSpec'
        type: array
    type: object
  knowledge.ComponentConstraint:
    properties:
      availableSpecCodes:
        items:
          type: string
        type: array
      componentRequired:
        type: boolean
      minZoneQuantity:
        type: integer
      parasite:
        type: boolean
      suggestedNodeQuantities:
        items:
          type: integer
        type: array
    type: object
  knowledge.ComponentPortConstraint:
    properties:
      portCount:
        type: integer
      portRangeEnd:
        type: integer
      portRangeStart:
        type: integer
    type: object
  log.SearchTiDBLogDetail:
    properties:
      clusterId:
        example: abc
        type: string
      ext:
        additionalProperties: true
        type: object
      id:
        example: zvadfwf
        type: string
      index:
        example: tiem-tidb-cluster-2021.09.23
        type: string
      ip:
        example: 127.0.0.1
        type: string
      level:
        example: warn
        type: string
      message:
        example: tidb log
        type: string
      module:
        example: tidb
        type: string
      sourceLine:
        example: main.go:210
        type: string
      timestamp:
        example: "2021-09-23 14:23:10"
        type: string
    type: object
  log.SearchTiDBLogRsp:
    properties:
      results:
        items:
          $ref: '#/definitions/log.SearchTiDBLogDetail'
        type: array
      took:
        example: 10
        type: integer
    type: object
  management.ClusterDisplayInfo:
    properties:
      backupFileUsage:
        $ref: '#/definitions/controller.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuUsage:
        $ref: '#/definitions/controller.Usage'
      createTime:
        type: string
      dbPassword:
        type: string
      deleteTime:
        type: string
      diskUsage:
        $ref: '#/definitions/controller.Usage'
      extranetConnectAddresses:
        items:
          type: string
        type: array
      inProcessFlowId:
        type: integer
      intranetConnectAddresses:
        items:
          type: string
        type: array
      memoryUsage:
        $ref: '#/definitions/controller.Usage'
      portList:
        items:
          type: integer
        type: array
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      statusCode:
        type: string
      statusName:
        type: string
      storageUsage:
        $ref: '#/definitions/controller.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  management.ClusterNodeDemand:
    properties:
      componentType:
        type: string
      distributionItems:
        items:
          $ref: '#/definitions/management.DistributionItem'
        type: array
      totalNodeCount:
        type: integer
    type: object
  management.DescribeDashboardRsp:
    properties:
      clusterId:
        type: string
      token:
        type: string
      url:
        type: string
    type: object
  management.DescribeMonitorRsp:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      clusterId:
        example: abc
        type: string
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
    type: object
  management.DistributionItem:
    properties:
      count:
        type: integer
      specCode:
        type: string
      zoneCode:
        type: string
    type: object
  management.PreviewClusterRsp:
    properties:
      capabilityIndexes:
        items:
          $ref: '#/definitions/management.ServiceCapabilityIndex'
        type: array
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      cpuArchitecture:
        type: string
      dbPassword:
        type: string
      exclusive:
        type: boolean
      recoverInfo:
        $ref: '#/definitions/management.RecoverInfo'
      region:
        type: string
      stockCheckResult:
        items:
          $ref: '#/definitions/management.StockCheckItem'
        type: array
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
    type: object
  management.RecoverInfo:
    properties:
      backupRecordId:
        type: integer
      sourceClusterId:
        type: string
    type: object
  management.RestartClusterRsp:
    properties:
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  management.ServiceCapabilityIndex:
    properties:
      description:
        type: string
      name:
        type: string
      unit:
        type: string
      value:
        type: object
    type: object
  management.StockCheckItem:
    properties:
      component:
        $ref: '#/definitions/knowledge.ClusterComponent'
      count:
        type: integer
      cpuArchitecture:
        type: string
      enough:
        type: boolean
      region:
        type: string
      specCode:
        type: string
      zoneCode:
        type: string
    type: object
  management.TakeoverReq:
    properties:
      clusterNames:
        items:
          type: string
        type: array
      tiupIp:
        example: 172.16.4.147
        type: string
      tiupPath:
        example: .tiup/
        type: string
      tiupPort:
        example: 22
        type: integer
      tiupUserName:
        example: root
        type: string
      tiupUserPassword:
        example: password
        type: string
    type: object
  message.DataExportReq:
    properties:
      accessKey:
        type: string
      bucketRegion:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      fileType:
        type: string
      filter:
        type: string
      password:
        type: string
      secretAccessKey:
        type: string
      sql:
        type: string
      storageType:
        type: string
      userName:
        type: string
      zipName:
        type: string
    type: object
  message.DataExportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DataImportReq:
    properties:
      accessKey:
        type: string
      bucketUrl:
        type: string
      clusterId:
        type: string
      comment:
        type: string
      endpointUrl:
        type: string
      password:
        type: string
      recordId:
        type: string
      secretAccessKey:
        type: string
      storageType:
        type: string
      userName:
        type: string
    type: object
  message.DataImportResp:
    properties:
      recordId:
        type: string
      workFlowId:
        description: Asynchronous task workflow ID
        type: string
    type: object
  message.DeleteImportExportRecordReq:
    properties:
      recordId:
        type: string
    type: object
  message.DeleteImportExportRecordResp:
    properties:
      recordId:
        type: string
    type: object
  message.QueryDataImportExportRecordsResp:
    properties:
      transportRecords:
        items:
          $ref: '#/definitions/structs.DataImportExportRecordInfo'
        type: array
    type: object
  message.QueryWorkFlowDetailResp:
    properties:
      info:
        $ref: '#/definitions/structs.WorkFlowInfo'
      nodeNames:
        items:
          type: string
        type: array
      nodes:
        items:
          $ref: '#/definitions/structs.WorkFlowNodeInfo'
        type: array
    type: object
  message.QueryWorkFlowsResp:
    properties:
      workFlows:
        items:
          $ref: '#/definitions/structs.WorkFlowInfo'
        type: array
    type: object
  parameter.InspectParamsResp:
    properties:
      componentType:
        example: tidb
        type: string
      id:
        example: 1
        type: integer
      inspectValue:
        example: "1"
        type: string
      instance:
        example: 172.16.5.23
        type: string
      name:
        example: binlog_cache
        type: string
      realValue:
        $ref: '#/definitions/parameter.ParamRealValue'
    type: object
  parameter.ListParamsResp:
    properties:
      componentType:
        example: tidb
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      name:
        example: binlog_size
        type: string
      paramId:
        example: 1
        type: integer
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      realValue:
        $ref: '#/definitions/parameter.ParamRealValue'
      type:
        enum:
        - 0
        - 1
        - 2
        example: 0
        type: integer
      unit:
        example: mb
        type: string
      updateTime:
        example: 1636698675
        type: integer
    type: object
  parameter.ParamInstanceRealValue:
    properties:
      instance:
        example: 172.16.10.2
        type: string
      value:
        example: "2"
        type: string
    type: object
  parameter.ParamRealValue:
    properties:
      cluster:
        example: "1"
        type: string
      instances:
        items:
          $ref: '#/definitions/parameter.ParamInstanceRealValue'
        type: array
    type: object
  parameter.ParamUpdateRsp:
    properties:
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  parameter.UpdateParam:
    properties:
      componentType:
        example: TiDB
        type: string
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      name:
        example: binlog_cache
        type: string
      paramId:
        example: 1
        type: integer
      realValue:
        $ref: '#/definitions/parameter.ParamRealValue'
      source:
        enum:
        - 0
        - 1
        - 2
        - 3
        example: 0
        type: integer
      type:
        enum:
        - 0
        - 1
        - 2
        example: 0
        type: integer
    type: object
  parameter.UpdateParamsReq:
    properties:
      needReboot:
        example: false
        type: boolean
      params:
        items:
          $ref: '#/definitions/parameter.UpdateParam'
        type: array
    type: object
  paramgroup.ApplyParamGroupReq:
    properties:
      clusterId:
        example: "123"
        type: string
      needReboot:
        example: false
        type: boolean
    type: object
  paramgroup.ApplyParamGroupResp:
    properties:
      clusterId:
        example: "123"
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      inProcessFlowId:
        type: integer
      paramGroupId:
        example: 1
        type: integer
      statusCode:
        type: string
      statusName:
        type: string
      updateTime:
        type: string
    type: object
  paramgroup.CommonParamGroupResp:
    properties:
      paramGroupId:
        example: 1
        type: integer
    type: object
  paramgroup.CopyParamGroupReq:
    properties:
      name:
        example: 8C16GV4_copy
        type: string
      note:
        example: copy param group
        type: string
    type: object
  paramgroup.CreateAndUpdateParam:
    properties:
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      paramId:
        example: 123
        type: integer
    type: object
  paramgroup.CreateParamGroupReq:
    properties:
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: 8C16GV4_default
        type: string
      note:
        example: default param group
        type: string
      params:
        items:
          $ref: '#/definitions/paramgroup.CreateAndUpdateParam'
        type: array
      spec:
        example: 8C16G
        type: string
      version:
        example: "5.0"
        type: string
    type: object
  paramgroup.ParamDetail:
    properties:
      componentType:
        example: tidb
        type: string
      createTime:
        example: 1636698675
        type: integer
      defaultValue:
        example: "1"
        type: string
      description:
        example: binlog cache size
        type: string
      hasReboot:
        enum:
        - 0
        - 1
        example: 0
        type: integer
      name:
        example: binlog_size
        type: string
      note:
        example: binlog cache size
        type: string
      paramId:
        example: 1
        type: integer
      range:
        example:
        - "1"
        - ' 1000'
        items:
          type: string
        type: array
      source:
        enum:
        - 0
        - 1
        - 2
        - 3
        example: 0
        type: integer
      type:
        enum:
        - 0
        - 1
        - 2
        example: 0
        type: integer
      unit:
        example: mb
        type: string
      updateTime:
        example: 1636698675
        type: integer
    type: object
  paramgroup.QueryParamGroupResp:
    properties:
      createTime:
        example: 1636698675
        type: integer
      dbType:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      groupType:
        enum:
        - 1
        - 2
        example: 0
        type: integer
      hasDefault:
        enum:
        - 1
        - 2
        example: 1
        type: integer
      name:
        example: default
        type: string
      note:
        example: default param group
        type: string
      paramGroupId:
        example: 1
        type: integer
      params:
        items:
          $ref: '#/definitions/paramgroup.ParamDetail'
        type: array
      spec:
        example: 8C16G
        type: string
      updateTime:
        example: 1636698675
        type: integer
      version:
        example: "5.0"
        type: string
    type: object
  paramgroup.UpdateParamGroupReq:
    properties:
      name:
        example: 8C16GV4_default
        type: string
      note:
        example: default param group
        type: string
      params:
        items:
          $ref: '#/definitions/paramgroup.CreateAndUpdateParam'
        type: array
      spec:
        example: 8C16G
        type: string
      version:
        example: v5.0
        type: string
    type: object
  structs.BackupRecord:
    properties:
      backupMethod:
        type: string
      backupMode:
        type: string
      backupTso:
        type: integer
      backupType:
        type: string
      clusterId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      id:
        type: string
      size:
        type: number
      startTime:
        type: string
      status:
        type: string
      updateTime:
        type: string
    type: object
  structs.BackupStrategy:
    properties:
      backupDate:
        type: string
      clusterId:
        type: string
      period:
        type: string
    type: object
  structs.ClusterInfo:
    properties:
      alertUrl:
        example: http://127.0.0.1:9093
        type: string
      backupFileUsage:
        $ref: '#/definitions/structs.Usage'
      clusterId:
        type: string
      clusterName:
        type: string
      clusterType:
        type: string
      clusterVersion:
        type: string
      copies:
        description: The number of copies of the newly created cluster data, consistent with the number of copies set in PD
        type: integer
      cpuArchitecture:
        description: X86/X86_64/ARM
        type: string
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      createTime:
        type: string
      dbPassword:
        type: string
      dbUser:
        description: The username and password for the newly created database cluster, default is the root user, which is not valid for Data Migration clusters
        type: string
      deleteTime:
        type: string
      exclusive:
        description: Whether the newly created cluster is exclusive to physical resources, when exclusive, a host will only deploy instances of the same cluster, which may result in poor resource utilization
        type: boolean
      extranetConnectAddresses:
        items:
          type: string
        type: array
      grafanaUrl:
        example: http://127.0.0.1:3000
        type: string
      intranetConnectAddresses:
        items:
          type: string
        type: array
      maintainStatus:
        type: string
      maintainWindow:
        type: string
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      portList:
        items:
          type: integer
        type: array
      role:
        type: string
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      tags:
        items:
          type: string
        type: array
      tls:
        type: boolean
      updateTime:
        type: string
      userId:
        type: string
      whitelist:
        items:
          type: string
        type: array
    type: object
  structs.ClusterInstanceInfo:
    properties:
      addresses:
        items:
          type: string
        type: array
      cpuUsage:
        $ref: '#/definitions/structs.Usage'
      hostID:
        type: string
      id:
        type: string
      ioUtil:
        type: number
      iops:
        items:
          type: number
        type: array
      memoryUsage:
        $ref: '#/definitions/structs.Usage'
      ports:
        items:
          type: string
        type: array
      role:
        type: string
      spec:
        $ref: '#/definitions/structs.ProductSpecInfo'
        description: ??
      status:
        type: string
      storageUsage:
        $ref: '#/definitions/structs.Usage'
      type:
        type: string
      version:
        type: string
      zone:
        $ref: '#/definitions/structs.ZoneInfo'
        description: ??
    type: object
  structs.ClusterResourceParameter:
    properties:
      compute:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterCompute'
        type: array
    type: object
  structs.ClusterResourceParameterCompute:
    properties:
      componentType:
        description: TiDB/TiKV/PD/TiFlash/TiCDC/DM-Master/DM-Worker
        type: string
      resource:
        items:
          $ref: '#/definitions/structs.ClusterResourceParameterComputeResource'
        type: array
      totalNodeCount:
        type: integer
    type: object
  structs.ClusterResourceParameterComputeResource:
    properties:
      count:
        type: integer
      diskCapacity:
        type: integer
      diskType:
        description: NVMeSSD/SSD/SATA
        type: string
      specCode:
        description: 4C8G/8C16G ?
        type: string
      zoneCode:
        type: string
    type: object
  structs.DataImportExportRecordInfo:
    properties:
      clusterId:
        type: string
      comment:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      endTime:
        type: string
      filePath:
        type: string
      recordId:
        type: string
      startTime:
        type: string
      status:
        type: string
      storageType:
        type: string
      transportType:
        type: string
      updateTime:
        type: string
      zipName:
        type: string
    type: object
  structs.ProductSpecInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  structs.Usage:
    properties:
      total:
        type: number
      usageRate:
        type: number
      used:
        type: number
    type: object
  structs.WorkFlowInfo:
    properties:
      BizId:
        type: string
      createTime:
        type: string
      deleteTime:
        type: string
      flowWorkName:
        type: string
      id:
        type: string
      status:
        type: string
      updateTime:
        type: string
    type: object
  structs.WorkFlowNodeInfo:
    properties:
      endTime:
        type: string
      id:
        type: string
      name:
        type: string
      parameters:
        type: string
      result:
        type: string
      startTime:
        type: string
      status:
        type: string
    type: object
  structs.ZoneInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  warehouse.DomainResource:
    properties:
      count:
        type: integer
      purpose:
        type: string
      specCode:
        type: string
      specName:
        type: string
      zoneCode:
        type: string
      zoneName:
        type: string
    type: object
  warehouse.Node:
    properties:
      Code:
        type: string
      Name:
        type: string
      Prefix:
        type: string
      SubNodes:
        items:
          $ref: '#/definitions/warehouse.Node'
        type: array
    type: object
  warehouse.Stocks:
    properties:
      freeCpuCores:
        type: integer
      freeDiskCapacity:
        type: integer
      freeDiskCount:
        type: integer
      freeHostCount:
        type: integer
      freeMemory:
        type: integer
    type: object
host: localhost:4116
info:
  contact:
    email: zhangpeijin@pingcap.com
    name: zhangpeijin
  description: TiEM UI API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: TiEM UI API
  version: "1.0"
paths:
  /backups/:
    get:
      consumes:
      - application/json
      description: query backup records of a cluster
      parameters:
      - in: query
        name: backupId
        type: string
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: startTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryBackupRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query backup records of a cluster
      tags:
      - cluster backup
    post: {}
  /backups/{backupId}:
    delete:
      consumes:
      - application/json
      description: delete backup record
      parameters:
      - description: backup record id
        in: path
        name: backupId
        required: true
        type: integer
      - description: backup delete request
        in: body
        name: backupDeleteReq
        required: true
        schema:
          $ref: '#/definitions/cluster.DeleteBackupDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteBackupDataResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete backup record
      tags:
      - cluster backup
  /changefeeds/:
    get:
      consumes:
      - application/json
      description: query change feed tasks of a cluster
      parameters:
      - example: CLUSTER_ID_IN_TIEM__22
        in: query
        name: clusterId
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: total
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/cluster.QueryChangeFeedTaskResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query change feed tasks of a cluster
      tags:
      - change feed
    post:
      consumes:
      - application/json
      description: create a change feed task
      parameters:
      - description: change feed task request
        in: body
        name: changeFeedTask
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}:
    delete:
      consumes:
      - application/json
      description: delete a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/:
    get:
      consumes:
      - application/json
      description: get change feed detail
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DetailChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: get change feed detail
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/pause:
    post:
      consumes:
      - application/json
      description: pause a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.PauseChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: pause a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/resume:
    post:
      consumes:
      - application/json
      description: resume a change feed task
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ResumeChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed task
      tags:
      - change feed
  /changefeeds/{changeFeedTaskId}/update:
    post:
      consumes:
      - application/json
      description: resume a change feed
      parameters:
      - description: changeFeedTaskId
        in: path
        name: changeFeedTaskId
        required: true
        type: string
      - description: change feed task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/cluster.UpdateChangeFeedTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.UpdateChangeFeedTaskResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: resume a change feed
      tags:
      - change feed
  /clusters/:
    get:
      consumes:
      - application/json
      description: query clusters
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: clusterName
        type: string
      - in: query
        name: clusterStatus
        type: string
      - in: query
        name: clusterTag
        type: string
      - in: query
        name: clusterType
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/management.ClusterDisplayInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query clusters
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: create a cluster
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CreateClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a cluster
      tags:
      - cluster
  /clusters/{clusterId}:
    delete:
      consumes:
      - application/json
      description: delete cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: delete request
        in: body
        name: deleteReq
        schema:
          $ref: '#/definitions/cluster.DeleteClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.DeleteClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete cluster
      tags:
      - cluster
    get:
      consumes:
      - application/json
      description: show details of a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.QueryClusterDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a cluster
      tags:
      - cluster
  /clusters/{clusterId}/dashboard:
    get:
      consumes:
      - application/json
      description: dashboard
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DescribeDashboardRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: dashboard
      tags:
      - cluster
  /clusters/{clusterId}/monitor:
    get:
      consumes:
      - application/json
      description: monitoring link
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.DescribeMonitorRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: monitoring link
      tags:
      - cluster
  /clusters/{clusterId}/params:
    get:
      consumes:
      - application/json
      description: query params of a cluster
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/parameter.ListParamsResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query params of a cluster
      tags:
      - cluster params
    put:
      consumes:
      - application/json
      description: submit params
      parameters:
      - description: update params request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/parameter.UpdateParamsReq'
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/parameter.ParamUpdateRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: submit params
      tags:
      - cluster params
  /clusters/{clusterId}/params/inspect:
    post:
      consumes:
      - application/json
      description: inspect params
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/parameter.InspectParamsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: inspect params
      tags:
      - cluster params
  /clusters/{clusterId}/restart:
    post:
      consumes:
      - application/json
      description: restart a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.RestartClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restart a cluster
      tags:
      - cluster
  /clusters/{clusterId}/stop:
    post:
      consumes:
      - application/json
      description: stop a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.StopClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: stop a cluster
      tags:
      - cluster
  /clusters/{clusterId}/strategy:
    put:
      consumes:
      - application/json
      description: save the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - description: backup strategy request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/cluster.SaveBackupStrategyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.SaveBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: save the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/{clusterId}/strategy/:
    get:
      consumes:
      - application/json
      description: show the backup strategy of a cluster
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.GetBackupStrategyResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show the backup strategy of a cluster
      tags:
      - cluster backup
  /clusters/clone:
    post:
      consumes:
      - application/json
      description: clone a cluster
      parameters:
      - description: clone cluster request
        in: body
        name: cloneClusterReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CloneClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.CloneClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: clone a cluster
      tags:
      - cluster
  /clusters/export:
    post:
      consumes:
      - application/json
      description: export
      parameters:
      - description: cluster info for data export
        in: body
        name: dataExport
        required: true
        schema:
          $ref: '#/definitions/message.DataExportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataExportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: export data from tidb cluster
      tags:
      - cluster export
  /clusters/import:
    post:
      consumes:
      - application/json
      description: import
      parameters:
      - description: cluster info for import data
        in: body
        name: dataImport
        required: true
        schema:
          $ref: '#/definitions/message.DataImportReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DataImportResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: import data to tidb cluster
      tags:
      - cluster import
  /clusters/preview:
    post:
      consumes:
      - application/json
      description: preview cluster topology and capability
      parameters:
      - description: preview request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/cluster.CreateClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/management.PreviewClusterRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: preview cluster topology and capability
      tags:
      - cluster
  /clusters/restore:
    post:
      consumes:
      - application/json
      description: restore a new cluster by backup record
      parameters:
      - description: restore request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/backuprestore.RestoreReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/controller.StatusInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: restore a new cluster by backup record
      tags:
      - cluster
  /clusters/scale-in:
    post:
      consumes:
      - application/json
      description: scale in a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale in request
        in: body
        name: scaleInReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleInClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleInClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale in a cluster
      tags:
      - cluster
  /clusters/scale-out:
    post:
      consumes:
      - application/json
      description: scale out a cluster
      parameters:
      - description: cluster id
        in: path
        name: clusterId
        required: true
        type: string
      - description: scale out request
        in: body
        name: scaleOutReq
        required: true
        schema:
          $ref: '#/definitions/cluster.ScaleOutClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/cluster.ScaleOutClusterResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: scale out a cluster
      tags:
      - cluster
  /clusters/takeover:
    post:
      consumes:
      - application/json
      description: takeover a cluster
      parameters:
      - description: takeover request
        in: body
        name: takeoverReq
        required: true
        schema:
          $ref: '#/definitions/management.TakeoverReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/management.ClusterDisplayInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: takeover a cluster
      tags:
      - cluster
  /clusters/transport:
    get:
      consumes:
      - application/json
      description: query records of import and export
      parameters:
      - in: query
        name: clusterId
        type: string
      - in: query
        name: endTime
        type: integer
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: reImport
        type: boolean
      - in: query
        name: recordId
        type: string
      - in: query
        name: startTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryDataImportExportRecordsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query records of import and export
      tags:
      - cluster data transport
  /clusters/transport/{recordId}:
    delete:
      consumes:
      - application/json
      description: delete data transport record
      parameters:
      - description: data transport recordId
        in: path
        name: recordId
        required: true
        type: integer
      - description: data transport record delete request
        in: body
        name: DataTransportDeleteReq
        required: true
        schema:
          $ref: '#/definitions/message.DeleteImportExportRecordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.DeleteImportExportRecordResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete data transport record
      tags:
      - cluster data transport
  /knowledges/:
    get:
      consumes:
      - application/json
      description: show cluster knowledge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/knowledge.ClusterTypeSpec'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show cluster knowledge
      tags:
      - knowledge
  /logs/tidb/{clusterId}:
    get:
      consumes:
      - application/json
      description: search tidb log
      parameters:
      - description: clusterId
        in: path
        name: clusterId
        required: true
        type: string
      - example: "2021-12-01 12:00:00"
        in: query
        name: endTime
        type: string
      - example: 127.0.0.1
        in: query
        name: ip
        type: string
      - example: warn
        in: query
        name: level
        type: string
      - example: tidb log
        in: query
        name: message
        type: string
      - example: tidb
        in: query
        name: module
        type: string
      - example: 1
        in: query
        name: page
        type: integer
      - example: 10
        in: query
        name: pageSize
        type: integer
      - example: "2021-09-01 12:00:00"
        in: query
        name: startTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/log.SearchTiDBLogRsp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: search tidb log
      tags:
      - logs
  /param-groups/:
    get:
      consumes:
      - application/json
      description: query param group
      parameters:
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: dbType
        type: integer
      - enum:
        - 0
        - 1
        - 2
        example: 0
        in: query
        name: hasDefault
        type: integer
      - example: false
        in: query
        name: hasDetail
        type: boolean
      - example: default
        in: query
        name: name
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - example: 8C16G
        in: query
        name: spec
        type: string
      - example: "5.0"
        in: query
        name: version
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/paramgroup.QueryParamGroupResp'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query param group
      tags:
      - param group
    post:
      consumes:
      - application/json
      description: create a param group
      parameters:
      - description: create request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/paramgroup.CreateParamGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.CommonParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: create a param group
      tags:
      - param group
  /param-groups/{paramGroupId}:
    delete:
      consumes:
      - application/json
      description: delete a param group
      parameters:
      - description: param group id
        in: path
        name: paramGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.CommonParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: delete a param group
      tags:
      - param group
    get:
      consumes:
      - application/json
      description: show details of a param group
      parameters:
      - description: param group id
        in: path
        name: paramGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.QueryParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a param group
      tags:
      - param group
    put:
      consumes:
      - application/json
      description: update a param group
      parameters:
      - description: update param group request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/paramgroup.UpdateParamGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.CommonParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: update a param group
      tags:
      - param group
  /param-groups/{paramGroupId}/apply:
    post:
      consumes:
      - application/json
      description: apply a param group
      parameters:
      - description: apply param group request
        in: body
        name: applyReq
        required: true
        schema:
          $ref: '#/definitions/paramgroup.ApplyParamGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.ApplyParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: apply a param group
      tags:
      - param group
  /param-groups/{paramGroupId}/copy:
    post:
      consumes:
      - application/json
      description: copy a param group
      parameters:
      - description: copy param group request
        in: body
        name: copyReq
        required: true
        schema:
          $ref: '#/definitions/paramgroup.CopyParamGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/paramgroup.CommonParamGroupResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: copy a param group
      tags:
      - param group
  /resources/allochosts:
    post:
      consumes:
      - application/json
      description: should be used in testing env
      parameters:
      - description: location and spec of hosts
        in: body
        name: Alloc
        required: true
        schema:
          $ref: '#/definitions/hostresource.AllocHostsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/hostresource.AllocHostsRsp'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Alloc host/disk resources for creating tidb cluster
      tags:
      - resource
  /resources/failuredomains:
    get:
      consumes:
      - application/json
      description: get resource info in each failure domain
      parameters:
      - description: failure domain type of dc/zone/rack
        enum:
        - 1
        - 2
        - 3
        in: query
        name: failureDomainType
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/warehouse.DomainResource'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources on failure domain view
      tags:
      - resource
  /resources/hierarchy:
    get:
      consumes:
      - application/json
      description: get resource hierarchy-tree
      parameters:
      - in: query
        name: Arch
        type: string
      - description: failure domain type of region/zone/rack/host
        enum:
        - 1
        - 2
        - 3
        - 4
        in: query
        name: level
        required: true
        type: integer
      - description: hierarchy depth
        in: query
        name: depth
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/warehouse.Node'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources hierarchy
      tags:
      - resource
  /resources/host:
    post:
      consumes:
      - application/json
      description: import one host by json
      parameters:
      - description: Host information
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/hostresource.HostInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a host to TiEM System
      tags:
      - resource
  /resources/hosts:
    get:
      consumes:
      - application/json
      description: get hosts lit
      parameters:
      - in: query
        name: loadStat
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: pageSize
        type: integer
      - in: query
        name: purpose
        type: string
      - in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/hostresource.HostInfo'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show all hosts list in TiEM
      tags:
      - resource
    post:
      consumes:
      - multipart/form-data
      description: import hosts by xlsx file
      parameters:
      - default: "false"
        description: whether hosts are reserved(won't be allocated) after import
        in: formData
        name: hostReserved
        type: string
      - description: hosts information in a xlsx file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: Import a batch of hosts to TiEM
      tags:
      - resource
  /resources/hosts-template/:
    get:
      consumes:
      - application/json
      description: get host template xlsx file
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      security:
      - ApiKeyAuth: []
      summary: Download the host information template file for importing
      tags:
      - resource
  /resources/hosts/:
    delete:
      consumes:
      - application/json
      description: remove hosts by a list
      parameters:
      - description: list of host IDs
        in: body
        name: hostIds
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a batch of hosts
      tags:
      - resource
    put:
      consumes:
      - application/json
      description: update host status by a list
      parameters:
      - collectionFormat: multi
        description: host id array
        in: query
        items:
          type: string
        name: id
        required: true
        type: array
      - description: do update in host list
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/hostresource.UpdateHostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update host status
      tags:
      - resource
  /resources/hosts/{hostId}:
    delete:
      consumes:
      - application/json
      description: remove a host by id
      parameters:
      - description: host id
        in: path
        name: hostId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Remove a host
      tags:
      - resource
    get:
      consumes:
      - application/json
      description: get one host by id
      parameters:
      - description: host ID
        in: path
        name: hostId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/hostresource.HostInfo'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show a host
      tags:
      - resource
  /resources/stocks:
    get:
      consumes:
      - application/json
      description: get resource stocks in specified conditions
      parameters:
      - in: query
        name: Arch
        type: string
      - in: query
        name: Capacity
        type: integer
      - in: query
        name: DiskStatus
        type: integer
      - in: query
        name: DiskType
        type: string
      - in: query
        name: HostIp
        type: string
      - in: query
        name: HostStatus
        type: integer
      - in: query
        name: LoadStat
        type: integer
      - in: query
        name: Rack
        type: string
      - in: query
        name: Region
        type: string
      - in: query
        name: Zone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/warehouse.Stocks'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Show the resources stocks
      tags:
      - resource
  /user/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login info
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/identification.LoginInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/identification.UserIdentity'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      summary: login
      tags:
      - platform
  /user/logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/identification.UserIdentity'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: logout
      tags:
      - platform
  /user/profile:
    get:
      consumes:
      - application/json
      description: profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/account.UserProfile'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: user profile
      tags:
      - platform
  /workflow/:
    get:
      consumes:
      - application/json
      description: query flow works
      parameters:
      - in: query
        name: bizId
        type: string
      - in: query
        name: flowName
        type: string
      - description: Current page location
        in: query
        name: page
        type: integer
      - description: Number of this request
        in: query
        name: pageSize
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.ResultWithPage'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowsResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: query flow works
      tags:
      - task
  /workflow/{workFlowId}:
    get:
      consumes:
      - application/json
      description: show details of a flow work
      parameters:
      - description: flow work id
        in: path
        name: workFlowId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controller.CommonResult'
            - properties:
                data:
                  $ref: '#/definitions/message.QueryWorkFlowDetailResp'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.CommonResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CommonResult'
      security:
      - ApiKeyAuth: []
      summary: show details of a flow work
      tags:
      - task
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
