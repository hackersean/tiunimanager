// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: manager.proto

package manager

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TiCPManagerService service

func NewTiCPManagerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TiCPManagerService service

type TiCPManagerService interface {
	// Auth manager module
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	VerifyIdentity(ctx context.Context, in *VerifyIdentityRequest, opts ...client.CallOption) (*VerifyIdentityResponse, error)
	// host manager module
	ImportHost(ctx context.Context, in *ImportHostRequest, opts ...client.CallOption) (*ImportHostResponse, error)
	ImportHostsInBatch(ctx context.Context, in *ImportHostsInBatchRequest, opts ...client.CallOption) (*ImportHostsInBatchResponse, error)
	RemoveHost(ctx context.Context, in *RemoveHostRequest, opts ...client.CallOption) (*RemoveHostResponse, error)
	RemoveHostsInBatch(ctx context.Context, in *RemoveHostsInBatchRequest, opts ...client.CallOption) (*RemoveHostsInBatchResponse, error)
	ListHost(ctx context.Context, in *ListHostsRequest, opts ...client.CallOption) (*ListHostsResponse, error)
	CheckDetails(ctx context.Context, in *CheckDetailsRequest, opts ...client.CallOption) (*CheckDetailsResponse, error)
	AllocHosts(ctx context.Context, in *AllocHostsRequest, opts ...client.CallOption) (*AllocHostResponse, error)
}

type tiCPManagerService struct {
	c    client.Client
	name string
}

func NewTiCPManagerService(name string, c client.Client) TiCPManagerService {
	return &tiCPManagerService{
		c:    c,
		name: name,
	}
}

func (c *tiCPManagerService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) VerifyIdentity(ctx context.Context, in *VerifyIdentityRequest, opts ...client.CallOption) (*VerifyIdentityResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.VerifyIdentity", in)
	out := new(VerifyIdentityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) ImportHost(ctx context.Context, in *ImportHostRequest, opts ...client.CallOption) (*ImportHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.ImportHost", in)
	out := new(ImportHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) ImportHostsInBatch(ctx context.Context, in *ImportHostsInBatchRequest, opts ...client.CallOption) (*ImportHostsInBatchResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.ImportHostsInBatch", in)
	out := new(ImportHostsInBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) RemoveHost(ctx context.Context, in *RemoveHostRequest, opts ...client.CallOption) (*RemoveHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.RemoveHost", in)
	out := new(RemoveHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) RemoveHostsInBatch(ctx context.Context, in *RemoveHostsInBatchRequest, opts ...client.CallOption) (*RemoveHostsInBatchResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.RemoveHostsInBatch", in)
	out := new(RemoveHostsInBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) ListHost(ctx context.Context, in *ListHostsRequest, opts ...client.CallOption) (*ListHostsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.ListHost", in)
	out := new(ListHostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) CheckDetails(ctx context.Context, in *CheckDetailsRequest, opts ...client.CallOption) (*CheckDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.CheckDetails", in)
	out := new(CheckDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiCPManagerService) AllocHosts(ctx context.Context, in *AllocHostsRequest, opts ...client.CallOption) (*AllocHostResponse, error) {
	req := c.c.NewRequest(c.name, "TiCPManagerService.AllocHosts", in)
	out := new(AllocHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TiCPManagerService service

type TiCPManagerServiceHandler interface {
	// Auth manager module
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	VerifyIdentity(context.Context, *VerifyIdentityRequest, *VerifyIdentityResponse) error
	// host manager module
	ImportHost(context.Context, *ImportHostRequest, *ImportHostResponse) error
	ImportHostsInBatch(context.Context, *ImportHostsInBatchRequest, *ImportHostsInBatchResponse) error
	RemoveHost(context.Context, *RemoveHostRequest, *RemoveHostResponse) error
	RemoveHostsInBatch(context.Context, *RemoveHostsInBatchRequest, *RemoveHostsInBatchResponse) error
	ListHost(context.Context, *ListHostsRequest, *ListHostsResponse) error
	CheckDetails(context.Context, *CheckDetailsRequest, *CheckDetailsResponse) error
	AllocHosts(context.Context, *AllocHostsRequest, *AllocHostResponse) error
}

func RegisterTiCPManagerServiceHandler(s server.Server, hdlr TiCPManagerServiceHandler, opts ...server.HandlerOption) error {
	type tiCPManagerService interface {
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		VerifyIdentity(ctx context.Context, in *VerifyIdentityRequest, out *VerifyIdentityResponse) error
		ImportHost(ctx context.Context, in *ImportHostRequest, out *ImportHostResponse) error
		ImportHostsInBatch(ctx context.Context, in *ImportHostsInBatchRequest, out *ImportHostsInBatchResponse) error
		RemoveHost(ctx context.Context, in *RemoveHostRequest, out *RemoveHostResponse) error
		RemoveHostsInBatch(ctx context.Context, in *RemoveHostsInBatchRequest, out *RemoveHostsInBatchResponse) error
		ListHost(ctx context.Context, in *ListHostsRequest, out *ListHostsResponse) error
		CheckDetails(ctx context.Context, in *CheckDetailsRequest, out *CheckDetailsResponse) error
		AllocHosts(ctx context.Context, in *AllocHostsRequest, out *AllocHostResponse) error
	}
	type TiCPManagerService struct {
		tiCPManagerService
	}
	h := &tiCPManagerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TiCPManagerService{h}, opts...))
}

type tiCPManagerServiceHandler struct {
	TiCPManagerServiceHandler
}

func (h *tiCPManagerServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.TiCPManagerServiceHandler.Login(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.TiCPManagerServiceHandler.Logout(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) VerifyIdentity(ctx context.Context, in *VerifyIdentityRequest, out *VerifyIdentityResponse) error {
	return h.TiCPManagerServiceHandler.VerifyIdentity(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) ImportHost(ctx context.Context, in *ImportHostRequest, out *ImportHostResponse) error {
	return h.TiCPManagerServiceHandler.ImportHost(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) ImportHostsInBatch(ctx context.Context, in *ImportHostsInBatchRequest, out *ImportHostsInBatchResponse) error {
	return h.TiCPManagerServiceHandler.ImportHostsInBatch(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) RemoveHost(ctx context.Context, in *RemoveHostRequest, out *RemoveHostResponse) error {
	return h.TiCPManagerServiceHandler.RemoveHost(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) RemoveHostsInBatch(ctx context.Context, in *RemoveHostsInBatchRequest, out *RemoveHostsInBatchResponse) error {
	return h.TiCPManagerServiceHandler.RemoveHostsInBatch(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) ListHost(ctx context.Context, in *ListHostsRequest, out *ListHostsResponse) error {
	return h.TiCPManagerServiceHandler.ListHost(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) CheckDetails(ctx context.Context, in *CheckDetailsRequest, out *CheckDetailsResponse) error {
	return h.TiCPManagerServiceHandler.CheckDetails(ctx, in, out)
}

func (h *tiCPManagerServiceHandler) AllocHosts(ctx context.Context, in *AllocHostsRequest, out *AllocHostResponse) error {
	return h.TiCPManagerServiceHandler.AllocHosts(ctx, in, out)
}
