// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: cluster.proto

package cluster

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterCreateReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *OperatorDTO            `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Cluster  *ClusterBaseInfoDTO     `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Demands  []*ClusterNodeDemandDTO `protobuf:"bytes,3,rep,name=demands,proto3" json:"demands,omitempty"`
}

func (x *ClusterCreateReqDTO) Reset() {
	*x = ClusterCreateReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCreateReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCreateReqDTO) ProtoMessage() {}

func (x *ClusterCreateReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCreateReqDTO.ProtoReflect.Descriptor instead.
func (*ClusterCreateReqDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterCreateReqDTO) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ClusterCreateReqDTO) GetCluster() *ClusterBaseInfoDTO {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterCreateReqDTO) GetDemands() []*ClusterNodeDemandDTO {
	if x != nil {
		return x.Demands
	}
	return nil
}

type ClusterCreateRespDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespStatus    *ResponseStatusDTO  `protobuf:"bytes,1,opt,name=respStatus,proto3" json:"respStatus,omitempty"`
	ClusterId     string              `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BaseInfo      *ClusterBaseInfoDTO `protobuf:"bytes,3,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	ClusterStatus *DisplayStatusDTO   `protobuf:"bytes,4,opt,name=clusterStatus,proto3" json:"clusterStatus,omitempty"`
}

func (x *ClusterCreateRespDTO) Reset() {
	*x = ClusterCreateRespDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCreateRespDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCreateRespDTO) ProtoMessage() {}

func (x *ClusterCreateRespDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCreateRespDTO.ProtoReflect.Descriptor instead.
func (*ClusterCreateRespDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterCreateRespDTO) GetRespStatus() *ResponseStatusDTO {
	if x != nil {
		return x.RespStatus
	}
	return nil
}

func (x *ClusterCreateRespDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterCreateRespDTO) GetBaseInfo() *ClusterBaseInfoDTO {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *ClusterCreateRespDTO) GetClusterStatus() *DisplayStatusDTO {
	if x != nil {
		return x.ClusterStatus
	}
	return nil
}

type ClusterQueryReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator      *OperatorDTO `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	PageReq       *PageDTO     `protobuf:"bytes,2,opt,name=pageReq,proto3" json:"pageReq,omitempty"`
	ClusterId     string       `protobuf:"bytes,3,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterName   string       `protobuf:"bytes,4,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterType   string       `protobuf:"bytes,5,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	ClusterStatus string       `protobuf:"bytes,6,opt,name=clusterStatus,proto3" json:"clusterStatus,omitempty"`
	ClusterTag    string       `protobuf:"bytes,7,opt,name=clusterTag,proto3" json:"clusterTag,omitempty"`
}

func (x *ClusterQueryReqDTO) Reset() {
	*x = ClusterQueryReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterQueryReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterQueryReqDTO) ProtoMessage() {}

func (x *ClusterQueryReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterQueryReqDTO.ProtoReflect.Descriptor instead.
func (*ClusterQueryReqDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterQueryReqDTO) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ClusterQueryReqDTO) GetPageReq() *PageDTO {
	if x != nil {
		return x.PageReq
	}
	return nil
}

func (x *ClusterQueryReqDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterQueryReqDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterQueryReqDTO) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ClusterQueryReqDTO) GetClusterStatus() string {
	if x != nil {
		return x.ClusterStatus
	}
	return ""
}

func (x *ClusterQueryReqDTO) GetClusterTag() string {
	if x != nil {
		return x.ClusterTag
	}
	return ""
}

type ClusterQueryRespDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespStatus *ResponseStatusDTO   `protobuf:"bytes,1,opt,name=respStatus,proto3" json:"respStatus,omitempty"`
	Page       *PageDTO             `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Clusters   []*ClusterDisplayDTO `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterQueryRespDTO) Reset() {
	*x = ClusterQueryRespDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterQueryRespDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterQueryRespDTO) ProtoMessage() {}

func (x *ClusterQueryRespDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterQueryRespDTO.ProtoReflect.Descriptor instead.
func (*ClusterQueryRespDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterQueryRespDTO) GetRespStatus() *ResponseStatusDTO {
	if x != nil {
		return x.RespStatus
	}
	return nil
}

func (x *ClusterQueryRespDTO) GetPage() *PageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ClusterQueryRespDTO) GetClusters() []*ClusterDisplayDTO {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ClusterDeleteReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator  *OperatorDTO `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	ClusterId string       `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *ClusterDeleteReqDTO) Reset() {
	*x = ClusterDeleteReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDeleteReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDeleteReqDTO) ProtoMessage() {}

func (x *ClusterDeleteReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDeleteReqDTO.ProtoReflect.Descriptor instead.
func (*ClusterDeleteReqDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterDeleteReqDTO) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ClusterDeleteReqDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ClusterDeleteRespDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespStatus    *ResponseStatusDTO `protobuf:"bytes,1,opt,name=respStatus,proto3" json:"respStatus,omitempty"`
	ClusterId     string             `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterStatus *DisplayStatusDTO  `protobuf:"bytes,3,opt,name=clusterStatus,proto3" json:"clusterStatus,omitempty"`
}

func (x *ClusterDeleteRespDTO) Reset() {
	*x = ClusterDeleteRespDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDeleteRespDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDeleteRespDTO) ProtoMessage() {}

func (x *ClusterDeleteRespDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDeleteRespDTO.ProtoReflect.Descriptor instead.
func (*ClusterDeleteRespDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterDeleteRespDTO) GetRespStatus() *ResponseStatusDTO {
	if x != nil {
		return x.RespStatus
	}
	return nil
}

func (x *ClusterDeleteRespDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterDeleteRespDTO) GetClusterStatus() *DisplayStatusDTO {
	if x != nil {
		return x.ClusterStatus
	}
	return nil
}

type ClusterDetailReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator  *OperatorDTO `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	ClusterId string       `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *ClusterDetailReqDTO) Reset() {
	*x = ClusterDetailReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDetailReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDetailReqDTO) ProtoMessage() {}

func (x *ClusterDetailReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDetailReqDTO.ProtoReflect.Descriptor instead.
func (*ClusterDetailReqDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterDetailReqDTO) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ClusterDetailReqDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ClusterDetailRespDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespStatus      *ResponseStatusDTO      `protobuf:"bytes,1,opt,name=respStatus,proto3" json:"respStatus,omitempty"`
	DisplayInfo     *ClusterDisplayDTO      `protobuf:"bytes,2,opt,name=displayInfo,proto3" json:"displayInfo,omitempty"`
	MaintenanceInfo *ClusterMaintenanceDTO  `protobuf:"bytes,3,opt,name=maintenanceInfo,proto3" json:"maintenanceInfo,omitempty"`
	Components      []*ComponentInstanceDTO `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *ClusterDetailRespDTO) Reset() {
	*x = ClusterDetailRespDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDetailRespDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDetailRespDTO) ProtoMessage() {}

func (x *ClusterDetailRespDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDetailRespDTO.ProtoReflect.Descriptor instead.
func (*ClusterDetailRespDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterDetailRespDTO) GetRespStatus() *ResponseStatusDTO {
	if x != nil {
		return x.RespStatus
	}
	return nil
}

func (x *ClusterDetailRespDTO) GetDisplayInfo() *ClusterDisplayDTO {
	if x != nil {
		return x.DisplayInfo
	}
	return nil
}

func (x *ClusterDetailRespDTO) GetMaintenanceInfo() *ClusterMaintenanceDTO {
	if x != nil {
		return x.MaintenanceInfo
	}
	return nil
}

func (x *ClusterDetailRespDTO) GetComponents() []*ComponentInstanceDTO {
	if x != nil {
		return x.Components
	}
	return nil
}

type ClusterMaintenanceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaintainTaskCron string `protobuf:"bytes,1,opt,name=maintainTaskCron,proto3" json:"maintainTaskCron,omitempty"`
}

func (x *ClusterMaintenanceDTO) Reset() {
	*x = ClusterMaintenanceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMaintenanceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMaintenanceDTO) ProtoMessage() {}

func (x *ClusterMaintenanceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMaintenanceDTO.ProtoReflect.Descriptor instead.
func (*ClusterMaintenanceDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterMaintenanceDTO) GetMaintainTaskCron() string {
	if x != nil {
		return x.MaintainTaskCron
	}
	return ""
}

type ComponentInstanceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo *ComponentBaseInfoDTO          `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	Nodes    []*ComponentNodeDisplayInfoDTO `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ComponentInstanceDTO) Reset() {
	*x = ComponentInstanceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentInstanceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentInstanceDTO) ProtoMessage() {}

func (x *ComponentInstanceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentInstanceDTO.ProtoReflect.Descriptor instead.
func (*ComponentInstanceDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *ComponentInstanceDTO) GetBaseInfo() *ComponentBaseInfoDTO {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *ComponentInstanceDTO) GetNodes() []*ComponentNodeDisplayInfoDTO {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ComponentNodeDisplayInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string                    `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Version  string                    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Status   string                    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Instance *ComponentNodeInstanceDTO `protobuf:"bytes,4,opt,name=instance,proto3" json:"instance,omitempty"`
	Usages   *ComponentNodeUsageDTO    `protobuf:"bytes,5,opt,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ComponentNodeDisplayInfoDTO) Reset() {
	*x = ComponentNodeDisplayInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNodeDisplayInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNodeDisplayInfoDTO) ProtoMessage() {}

func (x *ComponentNodeDisplayInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNodeDisplayInfoDTO.ProtoReflect.Descriptor instead.
func (*ComponentNodeDisplayInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *ComponentNodeDisplayInfoDTO) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ComponentNodeDisplayInfoDTO) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ComponentNodeDisplayInfoDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ComponentNodeDisplayInfoDTO) GetInstance() *ComponentNodeInstanceDTO {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ComponentNodeDisplayInfoDTO) GetUsages() *ComponentNodeUsageDTO {
	if x != nil {
		return x.Usages
	}
	return nil
}

type ComponentNodeUsageDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoUtil       float32   `protobuf:"fixed32,1,opt,name=ioUtil,proto3" json:"ioUtil,omitempty"`
	Iops         []float32 `protobuf:"fixed32,2,rep,packed,name=iops,proto3" json:"iops,omitempty"`
	CpuUsage     *UsageDTO `protobuf:"bytes,3,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	MemoryUsage  *UsageDTO `protobuf:"bytes,4,opt,name=memoryUsage,proto3" json:"memoryUsage,omitempty"`
	StoregeUsage *UsageDTO `protobuf:"bytes,5,opt,name=storegeUsage,proto3" json:"storegeUsage,omitempty"`
}

func (x *ComponentNodeUsageDTO) Reset() {
	*x = ComponentNodeUsageDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNodeUsageDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNodeUsageDTO) ProtoMessage() {}

func (x *ComponentNodeUsageDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNodeUsageDTO.ProtoReflect.Descriptor instead.
func (*ComponentNodeUsageDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *ComponentNodeUsageDTO) GetIoUtil() float32 {
	if x != nil {
		return x.IoUtil
	}
	return 0
}

func (x *ComponentNodeUsageDTO) GetIops() []float32 {
	if x != nil {
		return x.Iops
	}
	return nil
}

func (x *ComponentNodeUsageDTO) GetCpuUsage() *UsageDTO {
	if x != nil {
		return x.CpuUsage
	}
	return nil
}

func (x *ComponentNodeUsageDTO) GetMemoryUsage() *UsageDTO {
	if x != nil {
		return x.MemoryUsage
	}
	return nil
}

func (x *ComponentNodeUsageDTO) GetStoregeUsage() *UsageDTO {
	if x != nil {
		return x.StoregeUsage
	}
	return nil
}

type ComponentNodeInstanceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId string                `protobuf:"bytes,1,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Port   int32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Role   *ComponentNodeRoleDTO `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Spec   *SpecBaseInfoDTO      `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Zone   *ZoneBaseInfoDTO      `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *ComponentNodeInstanceDTO) Reset() {
	*x = ComponentNodeInstanceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNodeInstanceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNodeInstanceDTO) ProtoMessage() {}

func (x *ComponentNodeInstanceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNodeInstanceDTO.ProtoReflect.Descriptor instead.
func (*ComponentNodeInstanceDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *ComponentNodeInstanceDTO) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ComponentNodeInstanceDTO) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ComponentNodeInstanceDTO) GetRole() *ComponentNodeRoleDTO {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ComponentNodeInstanceDTO) GetSpec() *SpecBaseInfoDTO {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ComponentNodeInstanceDTO) GetZone() *ZoneBaseInfoDTO {
	if x != nil {
		return x.Zone
	}
	return nil
}

type ZoneBaseInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneCode string `protobuf:"bytes,1,opt,name=zoneCode,proto3" json:"zoneCode,omitempty"`
	ZoneName string `protobuf:"bytes,2,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
}

func (x *ZoneBaseInfoDTO) Reset() {
	*x = ZoneBaseInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneBaseInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneBaseInfoDTO) ProtoMessage() {}

func (x *ZoneBaseInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneBaseInfoDTO.ProtoReflect.Descriptor instead.
func (*ZoneBaseInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ZoneBaseInfoDTO) GetZoneCode() string {
	if x != nil {
		return x.ZoneCode
	}
	return ""
}

func (x *ZoneBaseInfoDTO) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

type SpecBaseInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecCode string `protobuf:"bytes,1,opt,name=specCode,proto3" json:"specCode,omitempty"`
	SpecName string `protobuf:"bytes,2,opt,name=specName,proto3" json:"specName,omitempty"`
}

func (x *SpecBaseInfoDTO) Reset() {
	*x = SpecBaseInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecBaseInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecBaseInfoDTO) ProtoMessage() {}

func (x *SpecBaseInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecBaseInfoDTO.ProtoReflect.Descriptor instead.
func (*SpecBaseInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *SpecBaseInfoDTO) GetSpecCode() string {
	if x != nil {
		return x.SpecCode
	}
	return ""
}

func (x *SpecBaseInfoDTO) GetSpecName() string {
	if x != nil {
		return x.SpecName
	}
	return ""
}

type ComponentNodeRoleDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleCode string `protobuf:"bytes,1,opt,name=roleCode,proto3" json:"roleCode,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=roleName,proto3" json:"roleName,omitempty"`
}

func (x *ComponentNodeRoleDTO) Reset() {
	*x = ComponentNodeRoleDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNodeRoleDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNodeRoleDTO) ProtoMessage() {}

func (x *ComponentNodeRoleDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNodeRoleDTO.ProtoReflect.Descriptor instead.
func (*ComponentNodeRoleDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ComponentNodeRoleDTO) GetRoleCode() string {
	if x != nil {
		return x.RoleCode
	}
	return ""
}

func (x *ComponentNodeRoleDTO) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type ComponentBaseInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType string `protobuf:"bytes,1,opt,name=componentType,proto3" json:"componentType,omitempty"`
	ComponentName string `protobuf:"bytes,2,opt,name=componentName,proto3" json:"componentName,omitempty"`
}

func (x *ComponentBaseInfoDTO) Reset() {
	*x = ComponentBaseInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentBaseInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentBaseInfoDTO) ProtoMessage() {}

func (x *ComponentBaseInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentBaseInfoDTO.ProtoReflect.Descriptor instead.
func (*ComponentBaseInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *ComponentBaseInfoDTO) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ComponentBaseInfoDTO) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

type DisplayStatusDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode      string `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusName      string `protobuf:"bytes,2,opt,name=statusName,proto3" json:"statusName,omitempty"`
	InProcessFlowId int32  `protobuf:"varint,3,opt,name=inProcessFlowId,proto3" json:"inProcessFlowId,omitempty"`
	CreateTime      int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      int64  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DeleteTime      int64  `protobuf:"varint,6,opt,name=deleteTime,proto3" json:"deleteTime,omitempty"`
}

func (x *DisplayStatusDTO) Reset() {
	*x = DisplayStatusDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayStatusDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayStatusDTO) ProtoMessage() {}

func (x *DisplayStatusDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayStatusDTO.ProtoReflect.Descriptor instead.
func (*DisplayStatusDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *DisplayStatusDTO) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DisplayStatusDTO) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *DisplayStatusDTO) GetInProcessFlowId() int32 {
	if x != nil {
		return x.InProcessFlowId
	}
	return 0
}

func (x *DisplayStatusDTO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DisplayStatusDTO) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DisplayStatusDTO) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type RecoverInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceClusterId string `protobuf:"bytes,1,opt,name=sourceClusterId,proto3" json:"sourceClusterId,omitempty"`
	BackupRecordId  int64  `protobuf:"varint,2,opt,name=backupRecordId,proto3" json:"backupRecordId,omitempty"`
}

func (x *RecoverInfoDTO) Reset() {
	*x = RecoverInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverInfoDTO) ProtoMessage() {}

func (x *RecoverInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverInfoDTO.ProtoReflect.Descriptor instead.
func (*RecoverInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *RecoverInfoDTO) GetSourceClusterId() string {
	if x != nil {
		return x.SourceClusterId
	}
	return ""
}

func (x *RecoverInfoDTO) GetBackupRecordId() int64 {
	if x != nil {
		return x.BackupRecordId
	}
	return 0
}

type ClusterBaseInfoDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName    string             `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	DbPassword     string             `protobuf:"bytes,2,opt,name=dbPassword,proto3" json:"dbPassword,omitempty"`
	ClusterType    *ClusterTypeDTO    `protobuf:"bytes,3,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	ClusterVersion *ClusterVersionDTO `protobuf:"bytes,4,opt,name=clusterVersion,proto3" json:"clusterVersion,omitempty"`
	Tags           []string           `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Tls            bool               `protobuf:"varint,6,opt,name=tls,proto3" json:"tls,omitempty"`
	RecoverInfo    *RecoverInfoDTO    `protobuf:"bytes,7,opt,name=recoverInfo,proto3" json:"recoverInfo,omitempty"`
}

func (x *ClusterBaseInfoDTO) Reset() {
	*x = ClusterBaseInfoDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBaseInfoDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBaseInfoDTO) ProtoMessage() {}

func (x *ClusterBaseInfoDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBaseInfoDTO.ProtoReflect.Descriptor instead.
func (*ClusterBaseInfoDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterBaseInfoDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterBaseInfoDTO) GetDbPassword() string {
	if x != nil {
		return x.DbPassword
	}
	return ""
}

func (x *ClusterBaseInfoDTO) GetClusterType() *ClusterTypeDTO {
	if x != nil {
		return x.ClusterType
	}
	return nil
}

func (x *ClusterBaseInfoDTO) GetClusterVersion() *ClusterVersionDTO {
	if x != nil {
		return x.ClusterVersion
	}
	return nil
}

func (x *ClusterBaseInfoDTO) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClusterBaseInfoDTO) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *ClusterBaseInfoDTO) GetRecoverInfo() *RecoverInfoDTO {
	if x != nil {
		return x.RecoverInfo
	}
	return nil
}

type OperatorDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TenantId string `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *OperatorDTO) Reset() {
	*x = OperatorDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorDTO) ProtoMessage() {}

func (x *OperatorDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorDTO.ProtoReflect.Descriptor instead.
func (*OperatorDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *OperatorDTO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperatorDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatorDTO) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ClusterNodeDemandDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType  string                 `protobuf:"bytes,1,opt,name=componentType,proto3" json:"componentType,omitempty"`
	TotalNodeCount int32                  `protobuf:"varint,2,opt,name=totalNodeCount,proto3" json:"totalNodeCount,omitempty"`
	Items          []*DistributionItemDTO `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ClusterNodeDemandDTO) Reset() {
	*x = ClusterNodeDemandDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNodeDemandDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeDemandDTO) ProtoMessage() {}

func (x *ClusterNodeDemandDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeDemandDTO.ProtoReflect.Descriptor instead.
func (*ClusterNodeDemandDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterNodeDemandDTO) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ClusterNodeDemandDTO) GetTotalNodeCount() int32 {
	if x != nil {
		return x.TotalNodeCount
	}
	return 0
}

func (x *ClusterNodeDemandDTO) GetItems() []*DistributionItemDTO {
	if x != nil {
		return x.Items
	}
	return nil
}

type DistributionItemDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneCode string `protobuf:"bytes,1,opt,name=zoneCode,proto3" json:"zoneCode,omitempty"`
	SpecCode string `protobuf:"bytes,2,opt,name=specCode,proto3" json:"specCode,omitempty"`
	Count    int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DistributionItemDTO) Reset() {
	*x = DistributionItemDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionItemDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionItemDTO) ProtoMessage() {}

func (x *DistributionItemDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionItemDTO.ProtoReflect.Descriptor instead.
func (*DistributionItemDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *DistributionItemDTO) GetZoneCode() string {
	if x != nil {
		return x.ZoneCode
	}
	return ""
}

func (x *DistributionItemDTO) GetSpecCode() string {
	if x != nil {
		return x.SpecCode
	}
	return ""
}

func (x *DistributionItemDTO) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClusterDisplayDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string              `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BaseInfo  *ClusterBaseInfoDTO `protobuf:"bytes,2,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	Status    *DisplayStatusDTO   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Instances *ClusterInstanceDTO `protobuf:"bytes,4,opt,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ClusterDisplayDTO) Reset() {
	*x = ClusterDisplayDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDisplayDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDisplayDTO) ProtoMessage() {}

func (x *ClusterDisplayDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDisplayDTO.ProtoReflect.Descriptor instead.
func (*ClusterDisplayDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *ClusterDisplayDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterDisplayDTO) GetBaseInfo() *ClusterBaseInfoDTO {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *ClusterDisplayDTO) GetStatus() *DisplayStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClusterDisplayDTO) GetInstances() *ClusterInstanceDTO {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ClusterInstanceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntranetConnectAddresses []string  `protobuf:"bytes,1,rep,name=intranetConnectAddresses,proto3" json:"intranetConnectAddresses,omitempty"`
	ExtranetConnectAddresses []string  `protobuf:"bytes,2,rep,name=extranetConnectAddresses,proto3" json:"extranetConnectAddresses,omitempty"`
	Whitelist                []string  `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Port                     int32     `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	DiskUsage                *UsageDTO `protobuf:"bytes,5,opt,name=diskUsage,proto3" json:"diskUsage,omitempty"`
	CpuUsage                 *UsageDTO `protobuf:"bytes,6,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	MemoryUsage              *UsageDTO `protobuf:"bytes,7,opt,name=memoryUsage,proto3" json:"memoryUsage,omitempty"`
	StorageUsage             *UsageDTO `protobuf:"bytes,8,opt,name=storageUsage,proto3" json:"storageUsage,omitempty"`
	BackupFileUsage          *UsageDTO `protobuf:"bytes,9,opt,name=backupFileUsage,proto3" json:"backupFileUsage,omitempty"`
}

func (x *ClusterInstanceDTO) Reset() {
	*x = ClusterInstanceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInstanceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInstanceDTO) ProtoMessage() {}

func (x *ClusterInstanceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInstanceDTO.ProtoReflect.Descriptor instead.
func (*ClusterInstanceDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *ClusterInstanceDTO) GetIntranetConnectAddresses() []string {
	if x != nil {
		return x.IntranetConnectAddresses
	}
	return nil
}

func (x *ClusterInstanceDTO) GetExtranetConnectAddresses() []string {
	if x != nil {
		return x.ExtranetConnectAddresses
	}
	return nil
}

func (x *ClusterInstanceDTO) GetWhitelist() []string {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *ClusterInstanceDTO) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClusterInstanceDTO) GetDiskUsage() *UsageDTO {
	if x != nil {
		return x.DiskUsage
	}
	return nil
}

func (x *ClusterInstanceDTO) GetCpuUsage() *UsageDTO {
	if x != nil {
		return x.CpuUsage
	}
	return nil
}

func (x *ClusterInstanceDTO) GetMemoryUsage() *UsageDTO {
	if x != nil {
		return x.MemoryUsage
	}
	return nil
}

func (x *ClusterInstanceDTO) GetStorageUsage() *UsageDTO {
	if x != nil {
		return x.StorageUsage
	}
	return nil
}

func (x *ClusterInstanceDTO) GetBackupFileUsage() *UsageDTO {
	if x != nil {
		return x.BackupFileUsage
	}
	return nil
}

type BackupRecordDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId     string            `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	StartTime     int64             `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64             `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Range         string            `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
	BackupType    string            `protobuf:"bytes,6,opt,name=backupType,proto3" json:"backupType,omitempty"`
	Operator      *OperatorDTO      `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	Size          uint64            `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	DisplayStatus *DisplayStatusDTO `protobuf:"bytes,9,opt,name=displayStatus,proto3" json:"displayStatus,omitempty"`
	FilePath      string            `protobuf:"bytes,10,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *BackupRecordDTO) Reset() {
	*x = BackupRecordDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRecordDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRecordDTO) ProtoMessage() {}

func (x *BackupRecordDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRecordDTO.ProtoReflect.Descriptor instead.
func (*BackupRecordDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *BackupRecordDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BackupRecordDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BackupRecordDTO) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BackupRecordDTO) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BackupRecordDTO) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *BackupRecordDTO) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *BackupRecordDTO) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *BackupRecordDTO) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BackupRecordDTO) GetDisplayStatus() *DisplayStatusDTO {
	if x != nil {
		return x.DisplayStatus
	}
	return nil
}

func (x *BackupRecordDTO) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type QueryBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	StartTime int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64    `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Page      *PageDTO `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *QueryBackupRequest) Reset() {
	*x = QueryBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBackupRequest) ProtoMessage() {}

func (x *QueryBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBackupRequest.ProtoReflect.Descriptor instead.
func (*QueryBackupRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *QueryBackupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryBackupRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QueryBackupRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *QueryBackupRequest) GetPage() *PageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

type QueryBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecords []*BackupRecordDTO `protobuf:"bytes,2,rep,name=backupRecords,proto3" json:"backupRecords,omitempty"`
	Page          *PageDTO           `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *QueryBackupResponse) Reset() {
	*x = QueryBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBackupResponse) ProtoMessage() {}

func (x *QueryBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBackupResponse.ProtoReflect.Descriptor instead.
func (*QueryBackupResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *QueryBackupResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryBackupResponse) GetBackupRecords() []*BackupRecordDTO {
	if x != nil {
		return x.BackupRecords
	}
	return nil
}

func (x *QueryBackupResponse) GetPage() *PageDTO {
	if x != nil {
		return x.Page
	}
	return nil
}

type CreateBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BackupType  string       `protobuf:"bytes,2,opt,name=backupType,proto3" json:"backupType,omitempty"`
	BackupRange string       `protobuf:"bytes,3,opt,name=backupRange,proto3" json:"backupRange,omitempty"`
	FilePath    string       `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Operator    *OperatorDTO `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CreateBackupRequest) Reset() {
	*x = CreateBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupRequest) ProtoMessage() {}

func (x *CreateBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupRequest.ProtoReflect.Descriptor instead.
func (*CreateBackupRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{28}
}

func (x *CreateBackupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateBackupRequest) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *CreateBackupRequest) GetBackupRange() string {
	if x != nil {
		return x.BackupRange
	}
	return ""
}

func (x *CreateBackupRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateBackupRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

type CreateBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BackupRecord *BackupRecordDTO   `protobuf:"bytes,2,opt,name=backupRecord,proto3" json:"backupRecord,omitempty"`
}

func (x *CreateBackupResponse) Reset() {
	*x = CreateBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupResponse) ProtoMessage() {}

func (x *CreateBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupResponse.ProtoReflect.Descriptor instead.
func (*CreateBackupResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *CreateBackupResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateBackupResponse) GetBackupRecord() *BackupRecordDTO {
	if x != nil {
		return x.BackupRecord
	}
	return nil
}

type RecoverBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator       *OperatorDTO `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	BackupRecordId int64        `protobuf:"varint,3,opt,name=backupRecordId,proto3" json:"backupRecordId,omitempty"`
}

func (x *RecoverBackupRequest) Reset() {
	*x = RecoverBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverBackupRequest) ProtoMessage() {}

func (x *RecoverBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverBackupRequest.ProtoReflect.Descriptor instead.
func (*RecoverBackupRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *RecoverBackupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RecoverBackupRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *RecoverBackupRequest) GetBackupRecordId() int64 {
	if x != nil {
		return x.BackupRecordId
	}
	return 0
}

type RecoverBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *ResponseStatusDTO      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecoverRecord *BackupRecoverRecordDTO `protobuf:"bytes,2,opt,name=recoverRecord,proto3" json:"recoverRecord,omitempty"`
}

func (x *RecoverBackupResponse) Reset() {
	*x = RecoverBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverBackupResponse) ProtoMessage() {}

func (x *RecoverBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverBackupResponse.ProtoReflect.Descriptor instead.
func (*RecoverBackupResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{31}
}

func (x *RecoverBackupResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RecoverBackupResponse) GetRecoverRecord() *BackupRecoverRecordDTO {
	if x != nil {
		return x.RecoverRecord
	}
	return nil
}

type BackupRecoverRecordDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId      string            `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BackupRecordId int64             `protobuf:"varint,3,opt,name=backupRecordId,proto3" json:"backupRecordId,omitempty"`
	StartTime      int64             `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime        int64             `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	DisplayStatus  *DisplayStatusDTO `protobuf:"bytes,6,opt,name=displayStatus,proto3" json:"displayStatus,omitempty"`
}

func (x *BackupRecoverRecordDTO) Reset() {
	*x = BackupRecoverRecordDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRecoverRecordDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRecoverRecordDTO) ProtoMessage() {}

func (x *BackupRecoverRecordDTO) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRecoverRecordDTO.ProtoReflect.Descriptor instead.
func (*BackupRecoverRecordDTO) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *BackupRecoverRecordDTO) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BackupRecoverRecordDTO) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BackupRecoverRecordDTO) GetBackupRecordId() int64 {
	if x != nil {
		return x.BackupRecordId
	}
	return 0
}

func (x *BackupRecoverRecordDTO) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BackupRecoverRecordDTO) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *BackupRecoverRecordDTO) GetDisplayStatus() *DisplayStatusDTO {
	if x != nil {
		return x.DisplayStatus
	}
	return nil
}

type DeleteBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator       *OperatorDTO `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	BackupRecordId int64        `protobuf:"varint,3,opt,name=backupRecordId,proto3" json:"backupRecordId,omitempty"`
}

func (x *DeleteBackupRequest) Reset() {
	*x = DeleteBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupRequest) ProtoMessage() {}

func (x *DeleteBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteBackupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteBackupRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *DeleteBackupRequest) GetBackupRecordId() int64 {
	if x != nil {
		return x.BackupRecordId
	}
	return 0
}

type DeleteBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteBackupResponse) Reset() {
	*x = DeleteBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupResponse) ProtoMessage() {}

func (x *DeleteBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupResponse.ProtoReflect.Descriptor instead.
func (*DeleteBackupResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteBackupResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

type BackupStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	BackupDate  string `protobuf:"bytes,2,opt,name=backupDate,proto3" json:"backupDate,omitempty"`
	FilePath    string `protobuf:"bytes,3,opt,name=filePath,proto3" json:"filePath,omitempty"`
	BackupRange string `protobuf:"bytes,4,opt,name=backupRange,proto3" json:"backupRange,omitempty"`
	BackupType  string `protobuf:"bytes,5,opt,name=backupType,proto3" json:"backupType,omitempty"`
	Period      string `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *BackupStrategy) Reset() {
	*x = BackupStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStrategy) ProtoMessage() {}

func (x *BackupStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStrategy.ProtoReflect.Descriptor instead.
func (*BackupStrategy) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{35}
}

func (x *BackupStrategy) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BackupStrategy) GetBackupDate() string {
	if x != nil {
		return x.BackupDate
	}
	return ""
}

func (x *BackupStrategy) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *BackupStrategy) GetBackupRange() string {
	if x != nil {
		return x.BackupRange
	}
	return ""
}

func (x *BackupStrategy) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *BackupStrategy) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type SaveBackupStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *OperatorDTO    `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Strategy *BackupStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *SaveBackupStrategyRequest) Reset() {
	*x = SaveBackupStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBackupStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBackupStrategyRequest) ProtoMessage() {}

func (x *SaveBackupStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBackupStrategyRequest.ProtoReflect.Descriptor instead.
func (*SaveBackupStrategyRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{36}
}

func (x *SaveBackupStrategyRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SaveBackupStrategyRequest) GetStrategy() *BackupStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type SaveBackupStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SaveBackupStrategyResponse) Reset() {
	*x = SaveBackupStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBackupStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBackupStrategyResponse) ProtoMessage() {}

func (x *SaveBackupStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBackupStrategyResponse.ProtoReflect.Descriptor instead.
func (*SaveBackupStrategyResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{37}
}

func (x *SaveBackupStrategyResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetBackupStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator  *OperatorDTO `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *GetBackupStrategyRequest) Reset() {
	*x = GetBackupStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupStrategyRequest) ProtoMessage() {}

func (x *GetBackupStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupStrategyRequest.ProtoReflect.Descriptor instead.
func (*GetBackupStrategyRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{38}
}

func (x *GetBackupStrategyRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetBackupStrategyRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

type GetBackupStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Strategy *BackupStrategy    `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *GetBackupStrategyResponse) Reset() {
	*x = GetBackupStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupStrategyResponse) ProtoMessage() {}

func (x *GetBackupStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupStrategyResponse.ProtoReflect.Descriptor instead.
func (*GetBackupStrategyResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{39}
}

func (x *GetBackupStrategyResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBackupStrategyResponse) GetStrategy() *BackupStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type QueryClusterParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator  *OperatorDTO `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *QueryClusterParametersRequest) Reset() {
	*x = QueryClusterParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClusterParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterParametersRequest) ProtoMessage() {}

func (x *QueryClusterParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterParametersRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterParametersRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{40}
}

func (x *QueryClusterParametersRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryClusterParametersRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

type QueryClusterParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClusterId      string             `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ParametersJson string             `protobuf:"bytes,3,opt,name=parametersJson,proto3" json:"parametersJson,omitempty"`
}

func (x *QueryClusterParametersResponse) Reset() {
	*x = QueryClusterParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClusterParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterParametersResponse) ProtoMessage() {}

func (x *QueryClusterParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterParametersResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterParametersResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{41}
}

func (x *QueryClusterParametersResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryClusterParametersResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryClusterParametersResponse) GetParametersJson() string {
	if x != nil {
		return x.ParametersJson
	}
	return ""
}

type SaveClusterParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ParametersJson string       `protobuf:"bytes,2,opt,name=parametersJson,proto3" json:"parametersJson,omitempty"`
	Operator       *OperatorDTO `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *SaveClusterParametersRequest) Reset() {
	*x = SaveClusterParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveClusterParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveClusterParametersRequest) ProtoMessage() {}

func (x *SaveClusterParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveClusterParametersRequest.ProtoReflect.Descriptor instead.
func (*SaveClusterParametersRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{42}
}

func (x *SaveClusterParametersRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SaveClusterParametersRequest) GetParametersJson() string {
	if x != nil {
		return x.ParametersJson
	}
	return ""
}

func (x *SaveClusterParametersRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

type SaveClusterParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DisplayInfo *DisplayStatusDTO  `protobuf:"bytes,2,opt,name=displayInfo,proto3" json:"displayInfo,omitempty"`
}

func (x *SaveClusterParametersResponse) Reset() {
	*x = SaveClusterParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveClusterParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveClusterParametersResponse) ProtoMessage() {}

func (x *SaveClusterParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveClusterParametersResponse.ProtoReflect.Descriptor instead.
func (*SaveClusterParametersResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{43}
}

func (x *SaveClusterParametersResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SaveClusterParametersResponse) GetDisplayInfo() *DisplayStatusDTO {
	if x != nil {
		return x.DisplayInfo
	}
	return nil
}

type DescribeDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator  *OperatorDTO `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DescribeDashboardRequest) Reset() {
	*x = DescribeDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDashboardRequest) ProtoMessage() {}

func (x *DescribeDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDashboardRequest.ProtoReflect.Descriptor instead.
func (*DescribeDashboardRequest) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{44}
}

func (x *DescribeDashboardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DescribeDashboardRequest) GetOperator() *OperatorDTO {
	if x != nil {
		return x.Operator
	}
	return nil
}

type DescribeDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *ResponseStatusDTO `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ClusterId string             `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Url       string             `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ShareCode string             `protobuf:"bytes,4,opt,name=shareCode,proto3" json:"shareCode,omitempty"`
}

func (x *DescribeDashboardResponse) Reset() {
	*x = DescribeDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cluster_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDashboardResponse) ProtoMessage() {}

func (x *DescribeDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cluster_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDashboardResponse.ProtoReflect.Descriptor instead.
func (*DescribeDashboardResponse) Descriptor() ([]byte, []int) {
	return file_cluster_proto_rawDescGZIP(), []int{45}
}

func (x *DescribeDashboardResponse) GetStatus() *ResponseStatusDTO {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DescribeDashboardResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DescribeDashboardResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DescribeDashboardResponse) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

var File_cluster_proto protoreflect.FileDescriptor

var file_cluster_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x32, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x37, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12,
	0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x32, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x5d, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1,
	0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xf9, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x54, 0x4f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54,
	0x4f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72,
	0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x54, 0x4f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54,
	0x4f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6f, 0x55, 0x74, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6f,
	0x55, 0x74, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x5a,
	0x6f, 0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x12, 0x1a,
	0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x54,
	0x4f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc0, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x54, 0x4f, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x54, 0x4f, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x54, 0x4f, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f,
	0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54,
	0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x54, 0x4f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x42, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x72, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x48, 0x0a, 0x1a,
	0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x22, 0x67, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x8e,
	0x01, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x80, 0x01, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x62, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x97,
	0x07, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x1a, 0x15, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12,
	0x39, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x13, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x44, 0x54, 0x4f, 0x1a, 0x14, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x44, 0x54,
	0x4f, 0x1a, 0x15, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x1a,
	0x15, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x54, 0x4f, 0x12, 0x3e, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12,
	0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1a, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x53,
	0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x19, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cluster_proto_rawDescOnce sync.Once
	file_cluster_proto_rawDescData = file_cluster_proto_rawDesc
)

func file_cluster_proto_rawDescGZIP() []byte {
	file_cluster_proto_rawDescOnce.Do(func() {
		file_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_cluster_proto_rawDescData)
	})
	return file_cluster_proto_rawDescData
}

var file_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_cluster_proto_goTypes = []interface{}{
	(*ClusterCreateReqDTO)(nil),            // 0: ClusterCreateReqDTO
	(*ClusterCreateRespDTO)(nil),           // 1: ClusterCreateRespDTO
	(*ClusterQueryReqDTO)(nil),             // 2: ClusterQueryReqDTO
	(*ClusterQueryRespDTO)(nil),            // 3: ClusterQueryRespDTO
	(*ClusterDeleteReqDTO)(nil),            // 4: ClusterDeleteReqDTO
	(*ClusterDeleteRespDTO)(nil),           // 5: ClusterDeleteRespDTO
	(*ClusterDetailReqDTO)(nil),            // 6: ClusterDetailReqDTO
	(*ClusterDetailRespDTO)(nil),           // 7: ClusterDetailRespDTO
	(*ClusterMaintenanceDTO)(nil),          // 8: ClusterMaintenanceDTO
	(*ComponentInstanceDTO)(nil),           // 9: ComponentInstanceDTO
	(*ComponentNodeDisplayInfoDTO)(nil),    // 10: ComponentNodeDisplayInfoDTO
	(*ComponentNodeUsageDTO)(nil),          // 11: ComponentNodeUsageDTO
	(*ComponentNodeInstanceDTO)(nil),       // 12: ComponentNodeInstanceDTO
	(*ZoneBaseInfoDTO)(nil),                // 13: ZoneBaseInfoDTO
	(*SpecBaseInfoDTO)(nil),                // 14: SpecBaseInfoDTO
	(*ComponentNodeRoleDTO)(nil),           // 15: ComponentNodeRoleDTO
	(*ComponentBaseInfoDTO)(nil),           // 16: ComponentBaseInfoDTO
	(*DisplayStatusDTO)(nil),               // 17: DisplayStatusDTO
	(*RecoverInfoDTO)(nil),                 // 18: RecoverInfoDTO
	(*ClusterBaseInfoDTO)(nil),             // 19: ClusterBaseInfoDTO
	(*OperatorDTO)(nil),                    // 20: OperatorDTO
	(*ClusterNodeDemandDTO)(nil),           // 21: ClusterNodeDemandDTO
	(*DistributionItemDTO)(nil),            // 22: DistributionItemDTO
	(*ClusterDisplayDTO)(nil),              // 23: ClusterDisplayDTO
	(*ClusterInstanceDTO)(nil),             // 24: ClusterInstanceDTO
	(*BackupRecordDTO)(nil),                // 25: BackupRecordDTO
	(*QueryBackupRequest)(nil),             // 26: QueryBackupRequest
	(*QueryBackupResponse)(nil),            // 27: QueryBackupResponse
	(*CreateBackupRequest)(nil),            // 28: CreateBackupRequest
	(*CreateBackupResponse)(nil),           // 29: CreateBackupResponse
	(*RecoverBackupRequest)(nil),           // 30: RecoverBackupRequest
	(*RecoverBackupResponse)(nil),          // 31: RecoverBackupResponse
	(*BackupRecoverRecordDTO)(nil),         // 32: BackupRecoverRecordDTO
	(*DeleteBackupRequest)(nil),            // 33: DeleteBackupRequest
	(*DeleteBackupResponse)(nil),           // 34: DeleteBackupResponse
	(*BackupStrategy)(nil),                 // 35: BackupStrategy
	(*SaveBackupStrategyRequest)(nil),      // 36: SaveBackupStrategyRequest
	(*SaveBackupStrategyResponse)(nil),     // 37: SaveBackupStrategyResponse
	(*GetBackupStrategyRequest)(nil),       // 38: GetBackupStrategyRequest
	(*GetBackupStrategyResponse)(nil),      // 39: GetBackupStrategyResponse
	(*QueryClusterParametersRequest)(nil),  // 40: QueryClusterParametersRequest
	(*QueryClusterParametersResponse)(nil), // 41: QueryClusterParametersResponse
	(*SaveClusterParametersRequest)(nil),   // 42: SaveClusterParametersRequest
	(*SaveClusterParametersResponse)(nil),  // 43: SaveClusterParametersResponse
	(*DescribeDashboardRequest)(nil),       // 44: DescribeDashboardRequest
	(*DescribeDashboardResponse)(nil),      // 45: DescribeDashboardResponse
	(*ResponseStatusDTO)(nil),              // 46: ResponseStatusDTO
	(*PageDTO)(nil),                        // 47: PageDTO
	(*UsageDTO)(nil),                       // 48: UsageDTO
	(*ClusterTypeDTO)(nil),                 // 49: ClusterTypeDTO
	(*ClusterVersionDTO)(nil),              // 50: ClusterVersionDTO
}
var file_cluster_proto_depIdxs = []int32{
	20, // 0: ClusterCreateReqDTO.operator:type_name -> OperatorDTO
	19, // 1: ClusterCreateReqDTO.cluster:type_name -> ClusterBaseInfoDTO
	21, // 2: ClusterCreateReqDTO.demands:type_name -> ClusterNodeDemandDTO
	46, // 3: ClusterCreateRespDTO.respStatus:type_name -> ResponseStatusDTO
	19, // 4: ClusterCreateRespDTO.baseInfo:type_name -> ClusterBaseInfoDTO
	17, // 5: ClusterCreateRespDTO.clusterStatus:type_name -> DisplayStatusDTO
	20, // 6: ClusterQueryReqDTO.operator:type_name -> OperatorDTO
	47, // 7: ClusterQueryReqDTO.pageReq:type_name -> PageDTO
	46, // 8: ClusterQueryRespDTO.respStatus:type_name -> ResponseStatusDTO
	47, // 9: ClusterQueryRespDTO.page:type_name -> PageDTO
	23, // 10: ClusterQueryRespDTO.clusters:type_name -> ClusterDisplayDTO
	20, // 11: ClusterDeleteReqDTO.operator:type_name -> OperatorDTO
	46, // 12: ClusterDeleteRespDTO.respStatus:type_name -> ResponseStatusDTO
	17, // 13: ClusterDeleteRespDTO.clusterStatus:type_name -> DisplayStatusDTO
	20, // 14: ClusterDetailReqDTO.operator:type_name -> OperatorDTO
	46, // 15: ClusterDetailRespDTO.respStatus:type_name -> ResponseStatusDTO
	23, // 16: ClusterDetailRespDTO.displayInfo:type_name -> ClusterDisplayDTO
	8,  // 17: ClusterDetailRespDTO.maintenanceInfo:type_name -> ClusterMaintenanceDTO
	9,  // 18: ClusterDetailRespDTO.components:type_name -> ComponentInstanceDTO
	16, // 19: ComponentInstanceDTO.baseInfo:type_name -> ComponentBaseInfoDTO
	10, // 20: ComponentInstanceDTO.nodes:type_name -> ComponentNodeDisplayInfoDTO
	12, // 21: ComponentNodeDisplayInfoDTO.instance:type_name -> ComponentNodeInstanceDTO
	11, // 22: ComponentNodeDisplayInfoDTO.usages:type_name -> ComponentNodeUsageDTO
	48, // 23: ComponentNodeUsageDTO.cpuUsage:type_name -> UsageDTO
	48, // 24: ComponentNodeUsageDTO.memoryUsage:type_name -> UsageDTO
	48, // 25: ComponentNodeUsageDTO.storegeUsage:type_name -> UsageDTO
	15, // 26: ComponentNodeInstanceDTO.role:type_name -> ComponentNodeRoleDTO
	14, // 27: ComponentNodeInstanceDTO.spec:type_name -> SpecBaseInfoDTO
	13, // 28: ComponentNodeInstanceDTO.zone:type_name -> ZoneBaseInfoDTO
	49, // 29: ClusterBaseInfoDTO.clusterType:type_name -> ClusterTypeDTO
	50, // 30: ClusterBaseInfoDTO.clusterVersion:type_name -> ClusterVersionDTO
	18, // 31: ClusterBaseInfoDTO.recoverInfo:type_name -> RecoverInfoDTO
	22, // 32: ClusterNodeDemandDTO.items:type_name -> DistributionItemDTO
	19, // 33: ClusterDisplayDTO.baseInfo:type_name -> ClusterBaseInfoDTO
	17, // 34: ClusterDisplayDTO.status:type_name -> DisplayStatusDTO
	24, // 35: ClusterDisplayDTO.instances:type_name -> ClusterInstanceDTO
	48, // 36: ClusterInstanceDTO.diskUsage:type_name -> UsageDTO
	48, // 37: ClusterInstanceDTO.cpuUsage:type_name -> UsageDTO
	48, // 38: ClusterInstanceDTO.memoryUsage:type_name -> UsageDTO
	48, // 39: ClusterInstanceDTO.storageUsage:type_name -> UsageDTO
	48, // 40: ClusterInstanceDTO.backupFileUsage:type_name -> UsageDTO
	20, // 41: BackupRecordDTO.operator:type_name -> OperatorDTO
	17, // 42: BackupRecordDTO.displayStatus:type_name -> DisplayStatusDTO
	47, // 43: QueryBackupRequest.page:type_name -> PageDTO
	46, // 44: QueryBackupResponse.status:type_name -> ResponseStatusDTO
	25, // 45: QueryBackupResponse.backupRecords:type_name -> BackupRecordDTO
	47, // 46: QueryBackupResponse.page:type_name -> PageDTO
	20, // 47: CreateBackupRequest.operator:type_name -> OperatorDTO
	46, // 48: CreateBackupResponse.status:type_name -> ResponseStatusDTO
	25, // 49: CreateBackupResponse.backupRecord:type_name -> BackupRecordDTO
	20, // 50: RecoverBackupRequest.operator:type_name -> OperatorDTO
	46, // 51: RecoverBackupResponse.status:type_name -> ResponseStatusDTO
	32, // 52: RecoverBackupResponse.recoverRecord:type_name -> BackupRecoverRecordDTO
	17, // 53: BackupRecoverRecordDTO.displayStatus:type_name -> DisplayStatusDTO
	20, // 54: DeleteBackupRequest.operator:type_name -> OperatorDTO
	46, // 55: DeleteBackupResponse.status:type_name -> ResponseStatusDTO
	20, // 56: SaveBackupStrategyRequest.operator:type_name -> OperatorDTO
	35, // 57: SaveBackupStrategyRequest.strategy:type_name -> BackupStrategy
	46, // 58: SaveBackupStrategyResponse.status:type_name -> ResponseStatusDTO
	20, // 59: GetBackupStrategyRequest.operator:type_name -> OperatorDTO
	46, // 60: GetBackupStrategyResponse.status:type_name -> ResponseStatusDTO
	35, // 61: GetBackupStrategyResponse.strategy:type_name -> BackupStrategy
	20, // 62: QueryClusterParametersRequest.operator:type_name -> OperatorDTO
	46, // 63: QueryClusterParametersResponse.status:type_name -> ResponseStatusDTO
	20, // 64: SaveClusterParametersRequest.operator:type_name -> OperatorDTO
	46, // 65: SaveClusterParametersResponse.status:type_name -> ResponseStatusDTO
	17, // 66: SaveClusterParametersResponse.displayInfo:type_name -> DisplayStatusDTO
	20, // 67: DescribeDashboardRequest.operator:type_name -> OperatorDTO
	46, // 68: DescribeDashboardResponse.status:type_name -> ResponseStatusDTO
	0,  // 69: ClusterService.CreateCluster:input_type -> ClusterCreateReqDTO
	2,  // 70: ClusterService.QueryCluster:input_type -> ClusterQueryReqDTO
	4,  // 71: ClusterService.DeleteCluster:input_type -> ClusterDeleteReqDTO
	6,  // 72: ClusterService.DetailCluster:input_type -> ClusterDetailReqDTO
	26, // 73: ClusterService.QueryBackupRecord:input_type -> QueryBackupRequest
	28, // 74: ClusterService.CreateBackup:input_type -> CreateBackupRequest
	30, // 75: ClusterService.RecoverBackupRecord:input_type -> RecoverBackupRequest
	33, // 76: ClusterService.DeleteBackupRecord:input_type -> DeleteBackupRequest
	36, // 77: ClusterService.SaveBackupStrategy:input_type -> SaveBackupStrategyRequest
	38, // 78: ClusterService.GetBackupStrategy:input_type -> GetBackupStrategyRequest
	40, // 79: ClusterService.QueryParameters:input_type -> QueryClusterParametersRequest
	42, // 80: ClusterService.SaveParameters:input_type -> SaveClusterParametersRequest
	44, // 81: ClusterService.DescribeDashboard:input_type -> DescribeDashboardRequest
	1,  // 82: ClusterService.CreateCluster:output_type -> ClusterCreateRespDTO
	3,  // 83: ClusterService.QueryCluster:output_type -> ClusterQueryRespDTO
	5,  // 84: ClusterService.DeleteCluster:output_type -> ClusterDeleteRespDTO
	7,  // 85: ClusterService.DetailCluster:output_type -> ClusterDetailRespDTO
	27, // 86: ClusterService.QueryBackupRecord:output_type -> QueryBackupResponse
	29, // 87: ClusterService.CreateBackup:output_type -> CreateBackupResponse
	31, // 88: ClusterService.RecoverBackupRecord:output_type -> RecoverBackupResponse
	34, // 89: ClusterService.DeleteBackupRecord:output_type -> DeleteBackupResponse
	37, // 90: ClusterService.SaveBackupStrategy:output_type -> SaveBackupStrategyResponse
	39, // 91: ClusterService.GetBackupStrategy:output_type -> GetBackupStrategyResponse
	41, // 92: ClusterService.QueryParameters:output_type -> QueryClusterParametersResponse
	43, // 93: ClusterService.SaveParameters:output_type -> SaveClusterParametersResponse
	45, // 94: ClusterService.DescribeDashboard:output_type -> DescribeDashboardResponse
	82, // [82:95] is the sub-list for method output_type
	69, // [69:82] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_cluster_proto_init() }
func file_cluster_proto_init() {
	if File_cluster_proto != nil {
		return
	}
	file_common_proto_init()
	file_softwarespec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCreateReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCreateRespDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterQueryReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterQueryRespDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDeleteReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDeleteRespDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDetailReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDetailRespDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMaintenanceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentInstanceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNodeDisplayInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNodeUsageDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNodeInstanceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneBaseInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecBaseInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNodeRoleDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentBaseInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayStatusDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterBaseInfoDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNodeDemandDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributionItemDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDisplayDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInstanceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRecordDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRecoverRecordDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBackupStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBackupStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClusterParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClusterParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveClusterParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveClusterParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cluster_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cluster_proto_goTypes,
		DependencyIndexes: file_cluster_proto_depIdxs,
		MessageInfos:      file_cluster_proto_msgTypes,
	}.Build()
	File_cluster_proto = out.File
	file_cluster_proto_rawDesc = nil
	file_cluster_proto_goTypes = nil
	file_cluster_proto_depIdxs = nil
}
